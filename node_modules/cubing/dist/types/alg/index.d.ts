import { A as AlgNode, a as Alg, M as Move, G as Grouping, L as LineComment, C as Commutator, b as Conjugate, N as Newline, P as Pause } from '../Alg-e2a80975.js';
export { a as Alg, A as AlgNode, C as Commutator, b as Conjugate, G as Grouping, L as LineComment, M as Move, d as MoveModifications, N as Newline, P as Pause, Q as QuantumMove, T as TraversalDownUp, c as TraversalUp } from '../Alg-e2a80975.js';
export { P as ExperimentalParsed } from '../parse-ec97687c.js';

/** @deprecated */
declare type Unit = AlgNode;

/** @category Alg */
declare class AlgBuilder {
    #private;
    push(u: AlgNode): void;
    /** @deprecated */
    experimentalPushAlg(alg: Alg): void;
    experimentalNumAlgNodes(): number;
    toAlg(): Alg;
    reset(): void;
}

declare const Example: {
    Sune: Alg;
    AntiSune: Alg;
    SuneCommutator: Alg;
    Niklas: Alg;
    EPerm: Alg;
    FURURFCompact: Alg;
    APermCompact: Alg;
    FURURFMoves: Alg;
    TPerm: Alg;
    HeadlightSwaps: Alg;
    TriplePause: Alg;
};

declare function keyToMove(e: KeyboardEvent): Move | null;

interface AlgCubingNetOptions {
    alg?: Alg;
    setup?: Alg;
    title?: string;
    puzzle?: "1x1x1" | "2x2x2" | "3x3x3" | "4x4x4" | "5x5x5" | "6x6x6" | "7x7x7" | "8x8x8" | "9x9x9" | "10x10x10" | "11x11x11" | "12x12x12" | "13x13x13" | "14x14x14" | "16x16x16" | "17x17x17";
    stage?: "full" | "cross" | "F2L" | "LL" | "OLL" | "PLL" | "CLS" | "ELS" | "L6E" | "CMLL" | "WV" | "ZBLL" | "void";
    view?: "editor" | "playback" | "fullscreen";
    type?: "moves" | "reconstruction" | "alg" | "reconstruction-end-with-setup";
}
declare function algCubingNetLink(options: AlgCubingNetOptions): string;

declare function experimentalAppendMove(alg: Alg, newMove: Move, options?: {
    coalesce?: boolean;
    mod?: number;
}): Alg;

declare function experimentalIs(v: any, c: typeof Alg | typeof Grouping | typeof LineComment | typeof Commutator | typeof Conjugate | typeof Move | typeof Newline | typeof Pause): boolean;

declare function setAlgDebug(options: {
    caratNISSNotationEnabled?: boolean;
}): void;

export { AlgBuilder, AlgCubingNetOptions, Example, Unit, algCubingNetLink, experimentalAppendMove, experimentalIs, keyToMove, setAlgDebug };
