// src/cubing/vendor/random-uint-below/get-random-values.ts
var cryptoPromise = null;
var cryptoMangled = "cr-yp-to";
var cryptoUnmangled = () => cryptoMangled.replace(/-/g, "");
async function getRandomValuesFactory() {
  if (!globalThis?.crypto?.getRandomValues) {
    const nodeWebCrypto = (await (cryptoPromise ?? (cryptoPromise = import(
      /* @vite-ignore */
      cryptoUnmangled()
    )))).webcrypto;
    return nodeWebCrypto.getRandomValues.bind(nodeWebCrypto);
  } else {
    return crypto.getRandomValues.bind(crypto);
  }
}

// src/cubing/vendor/random-uint-below/random53BitValue.ts
var MAX_JS_PRECISE_INT = 9007199254740992;
var UPPER_HALF_MULTIPLIER = 2097152;
var LOWER_HALF_DIVIDER = 2048;
function random53BitValue(getRandomValues) {
  const arr = new Uint32Array(2);
  getRandomValues(arr);
  const upper = arr[0];
  const lower = arr[1];
  return Math.floor(upper * UPPER_HALF_MULTIPLIER) + Math.floor(lower / LOWER_HALF_DIVIDER);
}
function validateMax(max) {
  if (typeof max !== "number" || max < 0 || Math.floor(max) !== max) {
    throw new Error("randomInt.below() not called with a positive integer value.");
  }
  if (max > MAX_JS_PRECISE_INT) {
    throw new Error(`Called randomInt.below() with max == ${max}, which is larger than JavaScript can handle with integer precision.`);
  }
}
async function randomUIntBelowFactory() {
  const getRandomValues = await getRandomValuesFactory();
  const randomUIntBelow = (max) => {
    validateMax(max);
    const val = random53BitValue(getRandomValues);
    const maxUniformSamplingRange = Math.floor(MAX_JS_PRECISE_INT / max) * max;
    if (val < maxUniformSamplingRange) {
      return val % max;
    } else {
      return randomUIntBelow(max);
    }
  };
  return randomUIntBelow;
}

// src/cubing/vendor/random-uint-below/random-choice.ts
async function randomChoiceFactory() {
  const randomUIntBelow = await randomUIntBelowFactory();
  return (arr) => arr[randomUIntBelow(arr.length)];
}

// src/cubing/vendor/random-uint-below/index.ts
var randomUIntBelowPromise = randomUIntBelowFactory();
async function randomPermute(list) {
  for (let i = 1; i < list.length; i++) {
    const j = (await randomUIntBelowPromise)(i);
    [list[i], list[j]] = [list[j], list[i]];
  }
}

export {
  randomUIntBelowFactory,
  randomChoiceFactory,
  randomPermute
};
//# sourceMappingURL=chunk-V55YSWJY.js.map
