{
  "version": 3,
  "sources": ["../../src/cubing/vendor/comlink-everywhere/inside/index.ts"],
  "sourcesContent": ["import { expose as comlinkExpose } from \"comlink\";\nimport nodeEndpoint from \"../node-adapter\";\n\nconst useNodeWorkarounds =\n  typeof globalThis.Worker === \"undefined\" &&\n  typeof (globalThis as any).WorkerNavigator === \"undefined\";\n\n// Mangled so that bundlers don't try to inline the source.\nconst worker_threads_mangled = \"node:w-orker-_threa-ds\";\nconst worker_threads_unmangled = () => worker_threads_mangled.replace(/-/g, \"\");\n\nexport async function nodeEndpointPort(): Promise<\n  Worker & {\n    nodeWorker?: import(\"node:worker_threads\").Worker;\n  }\n> {\n  const { parentPort } = await import(\n    /* @vite-ignore */ worker_threads_unmangled()\n  ).catch();\n  return nodeEndpoint(parentPort);\n}\n\nexport function expose(api: any) {\n  if (useNodeWorkarounds) {\n    (async () => {\n      comlinkExpose(api, await nodeEndpointPort());\n    })();\n  } else {\n    comlinkExpose(api);\n  }\n}\n"],
  "mappings": ";;;;;AAAA;AAGA,IAAM,qBACJ,OAAO,WAAW,WAAW,eAC7B,OAAQ,WAAmB,oBAAoB;AAGjD,IAAM,yBAAyB;AAC/B,IAAM,2BAA2B,MAAM,uBAAuB,QAAQ,MAAM,EAAE;AAE9E,kCAIE;AACA,QAAM,EAAE,eAAe,MAAM;AAAA;AAAA,IACR,yBAAyB;AAAA,IAC5C,MAAM;AACR,SAAO,qBAAa,UAAU;AAChC;AAEO,gBAAgB,KAAU;AAC/B,MAAI,oBAAoB;AACtB,IAAC,aAAY;AACX,oBAAc,KAAK,MAAM,iBAAiB,CAAC;AAAA,IAC7C,GAAG;AAAA,EACL,OAAO;AACL,kBAAc,GAAG;AAAA,EACnB;AACF;",
  "names": []
}
