{
  "version": 3,
  "sources": ["../../src/cubing/puzzle-geometry/FaceNameSwizzler.ts", "../../src/cubing/puzzle-geometry/notation-mapping/NullMapper.ts", "../../src/cubing/puzzle-geometry/notation-mapping/FTONotationMapper.ts", "../../src/cubing/puzzle-geometry/notation-mapping/FaceRenamingMapper.ts", "../../src/cubing/puzzle-geometry/notation-mapping/MegaminxScramblingNotationMapper.ts", "../../src/cubing/puzzle-geometry/notation-mapping/NxNxNCubeMapper.ts", "../../src/cubing/puzzle-geometry/notation-mapping/PyraminxNotationMapper.ts", "../../src/cubing/puzzle-geometry/notation-mapping/SkewbNotationMapper.ts", "../../src/cubing/puzzle-geometry/Options.ts", "../../src/cubing/puzzle-geometry/Perm.ts", "../../src/cubing/puzzle-geometry/PermOriSet.ts", "../../src/cubing/puzzle-geometry/PGPuzzles.ts", "../../src/cubing/puzzle-geometry/Quat.ts", "../../src/cubing/puzzle-geometry/PlatonicGenerator.ts", "../../src/cubing/puzzle-geometry/SchreierSims.ts", "../../src/cubing/puzzle-geometry/PuzzleGeometry.ts"],
  "sourcesContent": ["// Manages a set of face names.  Detects whether they are prefix-free.\n// Implements greedy splitting into face names and comparisons between\n// concatenated face names and grip names.\n\nexport class FaceNameSwizzler {\n  public prefixFree: boolean = true;\n  public gripnames: string[] = [];\n  constructor(public facenames: string[], gripnames_arg?: string[]) {\n    if (gripnames_arg) {\n      this.gripnames = gripnames_arg;\n    }\n    for (let i = 0; this.prefixFree && i < facenames.length; i++) {\n      for (let j = 0; this.prefixFree && j < facenames.length; j++) {\n        if (i !== j && facenames[i].startsWith(facenames[j])) {\n          this.prefixFree = false;\n        }\n      }\n    }\n  }\n\n  public setGripNames(names: string[]): void {\n    this.gripnames = names;\n  }\n\n  // split a string into face names and return a list of\n  // indices.\n  public splitByFaceNames(s: string): number[] {\n    const r = [];\n    let at = 0;\n    while (at < s.length) {\n      if (at > 0 && at < s.length && s[at] === \"_\") {\n        at++;\n      }\n      let currentMatch = -1;\n      for (let i = 0; i < this.facenames.length; i++) {\n        if (\n          s.substr(at).startsWith(this.facenames[i]) &&\n          (currentMatch < 0 ||\n            this.facenames[i].length > this.facenames[currentMatch].length)\n        ) {\n          currentMatch = i;\n        }\n      }\n      if (currentMatch >= 0) {\n        r.push(currentMatch);\n        at += this.facenames[currentMatch].length;\n      } else {\n        throw new Error(\"Could not split \" + s + \" into face names.\");\n      }\n    }\n    return r;\n  }\n\n  // cons a grip from an array of numbers.\n  public joinByFaceIndices(list: number[]): string {\n    let sep = \"\";\n    const r = [];\n    for (let i = 0; i < list.length; i++) {\n      r.push(sep);\n      r.push(this.facenames[list[i]]);\n      if (!this.prefixFree) {\n        sep = \"_\";\n      }\n    }\n    return r.join(\"\");\n  }\n\n  /*\n   *   Try to match something the user gave us with some geometric\n   *   feature.  We used to have strict requirements:\n   *\n   *      a)  The set of face names are prefix free\n   *      b)  When specifying a corner, all coincident planes were\n   *          specified\n   *\n   *   But, to allow megaminx to have more reasonable and\n   *   conventional names, and to permit shorter canonical\n   *   names, we are relaxing these requirements and adding\n   *   new syntax.  Now:\n   *\n   *      a)  Face names need not be syntax free.\n   *      b)  When parsing a geometric name, we use greedy\n   *          matching, so the longest name that matches the\n   *          user string at the current position is the one\n   *          assumed to match.\n   *      c)  Underscores are permitted to separate face names\n   *          (both in user input and in geometric\n   *          descriptions).\n   *      d)  Default names of corner moves where corners have\n   *          more than three corners, need only include three\n   *          of the corners.\n   *\n   *   This code is not performance-sensitive so we can do it a\n   *   slow and simple way.\n   */\n  public spinmatch(userinput: string, longname: string): boolean {\n    // are these the same rotationally?\n    if (userinput === longname) {\n      return true;\n    }\n    try {\n      const e1 = this.splitByFaceNames(userinput);\n      const e2 = this.splitByFaceNames(longname);\n      // All elements of userinput need to be in the longname.\n      // There should be no duplicate elements in the userinput.\n      // if both have length 1 or length 2, the sets must be equal.\n      // if both have length 3 or more, then the first set must be\n      // a subset of the second.  Order doesn't matter.\n      if (e1.length !== e2.length && e1.length < 3) {\n        return false;\n      }\n      for (let i = 0; i < e1.length; i++) {\n        for (let j = 0; j < i; j++) {\n          if (e1[i] === e1[j]) {\n            return false;\n          }\n        }\n        let found = false;\n        for (let j = 0; j < e2.length; j++) {\n          if (e1[i] === e2[j]) {\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          return false;\n        }\n      }\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /* same as above, but permit both to have v's on the end. */\n  public spinmatchv(userinput: string, longname: string): boolean {\n    if (userinput.endsWith(\"v\") && longname.endsWith(\"v\")) {\n      return this.spinmatch(\n        userinput.slice(0, userinput.length - 1),\n        longname.slice(0, longname.length - 1),\n      );\n    } else {\n      return this.spinmatch(userinput, longname);\n    }\n  }\n\n  public unswizzle(s: string): string {\n    if ((s.endsWith(\"v\") || s.endsWith(\"w\")) && s[0] <= \"Z\") {\n      s = s.slice(0, s.length - 1);\n    }\n    const upperCaseGrip = s.toUpperCase();\n    for (let i = 0; i < this.gripnames.length; i++) {\n      const g = this.gripnames[i];\n      if (this.spinmatch(upperCaseGrip, g)) {\n        return g;\n      }\n    }\n    return s;\n  }\n}\n", "import type { Move } from \"../../alg\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\nexport class NullMapper implements NotationMapper {\n  public notationToInternal(move: Move): Move | null {\n    return move;\n  }\n\n  public notationToExternal(move: Move): Move | null {\n    return move;\n  }\n}\n", "import { Move, QuantumMove } from \"../../alg\";\nimport type { FaceNameSwizzler } from \"../FaceNameSwizzler\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\nexport class FTONotationMapper implements NotationMapper {\n  constructor(private child: NotationMapper, private sw: FaceNameSwizzler) {}\n\n  public notationToInternal(move: Move): Move | null {\n    if (\n      move.family === \"T\" &&\n      move.innerLayer === undefined &&\n      move.outerLayer === undefined\n    ) {\n      return new Move(\n        new QuantumMove(\"FLRv\", move.innerLayer, move.outerLayer),\n        move.amount,\n      );\n    } else {\n      const r = this.child.notationToInternal(move);\n      return r;\n    }\n  }\n\n  // we never rewrite click moves to these moves.\n  public notationToExternal(move: Move): Move | null {\n    let fam = move.family;\n    if (fam.length > 0 && fam[fam.length - 1] === \"v\") {\n      fam = fam.substring(0, fam.length - 1);\n    }\n    if (this.sw.spinmatch(fam, \"FLUR\")) {\n      return new Move(\n        new QuantumMove(\"T\", move.innerLayer, move.outerLayer),\n        move.amount,\n      );\n    }\n    return this.child.notationToExternal(move);\n  }\n}\n", "// face renaming mapper.  Accepts two face name remappers.  We\n// work between the two.\n\nimport { Move, QuantumMove } from \"../../alg\";\nimport type { FaceNameSwizzler } from \"../FaceNameSwizzler\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\nexport class FaceRenamingMapper implements NotationMapper {\n  constructor(\n    public internalNames: FaceNameSwizzler,\n    public externalNames: FaceNameSwizzler,\n  ) {}\n\n  // TODO:  consider putting a cache in front of this\n  public convertString(\n    grip: string,\n    a: FaceNameSwizzler,\n    b: FaceNameSwizzler,\n  ): string {\n    let suffix = \"\";\n    if ((grip.endsWith(\"v\") || grip.endsWith(\"v\")) && grip <= \"_\") {\n      suffix = grip.slice(grip.length - 1);\n      grip = grip.slice(0, grip.length - 1);\n    }\n    const upper = grip.toUpperCase();\n    let isLowerCase = false;\n    if (grip !== upper) {\n      isLowerCase = true;\n      grip = upper;\n    }\n    grip = b.joinByFaceIndices(a.splitByFaceNames(grip));\n    if (isLowerCase) {\n      grip = grip.toLowerCase();\n    }\n    return grip + suffix;\n  }\n\n  public convert(move: Move, a: FaceNameSwizzler, b: FaceNameSwizzler): Move {\n    const grip = move.family;\n    const ngrip = this.convertString(grip, a, b);\n    if (grip === ngrip) {\n      return move;\n    } else {\n      return new Move(\n        new QuantumMove(ngrip, move.innerLayer, move.outerLayer),\n        move.amount,\n      );\n    }\n  }\n\n  public notationToInternal(move: Move): Move {\n    const r = this.convert(move, this.externalNames, this.internalNames);\n    return r;\n  }\n\n  public notationToExternal(move: Move): Move {\n    return this.convert(move, this.internalNames, this.externalNames);\n  }\n}\n", "// Sits on top of a (possibly null) notation mapper, and\n\nimport { Move, QuantumMove } from \"../../alg\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\n// adds R++/R--/D++/D-- notation mapping.\nexport class MegaminxScramblingNotationMapper implements NotationMapper {\n  constructor(private child: NotationMapper) {}\n\n  public notationToInternal(move: Move): Move | null {\n    if (move.innerLayer === undefined && move.outerLayer === undefined) {\n      if (Math.abs(move.amount) === 1) {\n        if (move.family === \"R++\") {\n          return new Move(new QuantumMove(\"L\", 3, 2), -2 * move.amount);\n        } else if (move.family === \"R--\") {\n          return new Move(new QuantumMove(\"L\", 3, 2), 2 * move.amount);\n        } else if (move.family === \"D++\") {\n          return new Move(new QuantumMove(\"U\", 3, 2), -2 * move.amount);\n        } else if (move.family === \"D--\") {\n          return new Move(new QuantumMove(\"U\", 3, 2), 2 * move.amount);\n        }\n\n        // TODO: Figure out if `cubing/alg` should parse `R++` to a family of `R++`.\n        if (move.family === \"R_PLUSPLUS_\") {\n          return new Move(new QuantumMove(\"L\", 3, 2), -2 * move.amount);\n        } else if (move.family === \"D_PLUSPLUS_\") {\n          return new Move(new QuantumMove(\"U\", 3, 2), -2 * move.amount);\n        }\n      }\n      if (move.family === \"y\") {\n        return new Move(\"Uv\", move.amount);\n      }\n      if (move.family === \"x\" && Math.abs(move.amount) === 2) {\n        return new Move(\"ERv\", move.amount / 2);\n      }\n    }\n    return this.child.notationToInternal(move);\n  }\n\n  // we never rewrite click moves to these moves.\n  public notationToExternal(move: Move): Move | null {\n    if (move.family === \"ERv\" && Math.abs(move.amount) === 1) {\n      return new Move(\n        new QuantumMove(\"x\", move.innerLayer, move.outerLayer),\n        move.amount * 2,\n      );\n    }\n    if (move.family === \"ILv\" && Math.abs(move.amount) === 1) {\n      return new Move(\n        new QuantumMove(\"x\", move.innerLayer, move.outerLayer),\n        -move.amount * 2,\n      );\n    }\n    if (move.family === \"Uv\") {\n      return new Move(\n        new QuantumMove(\"y\", move.innerLayer, move.outerLayer),\n        move.amount,\n      );\n    }\n    if (move.family === \"Dv\") {\n      return new Move(\"y\", -move.amount);\n    }\n    return this.child.notationToExternal(move);\n  }\n}\n", "import { Move, QuantumMove } from \"../../alg\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\nexport class NxNxNCubeMapper implements NotationMapper {\n  constructor(public slices: number) {}\n\n  public notationToInternal(move: Move): Move {\n    const grip = move.family;\n    if (!move.innerLayer && !move.outerLayer) {\n      if (grip === \"x\") {\n        move = new Move(\"Rv\", move.amount);\n      } else if (grip === \"y\") {\n        move = new Move(\"Uv\", move.amount);\n      } else if (grip === \"z\") {\n        move = new Move(\"Fv\", move.amount);\n      }\n      if ((this.slices & 1) === 1) {\n        if (grip === \"E\") {\n          move = new Move(\n            new QuantumMove(\"D\", (this.slices + 1) / 2),\n            move.amount,\n          );\n        } else if (grip === \"M\") {\n          move = new Move(\n            new QuantumMove(\"L\", (this.slices + 1) / 2),\n            move.amount,\n          );\n        } else if (grip === \"S\") {\n          move = new Move(\n            new QuantumMove(\"F\", (this.slices + 1) / 2),\n            move.amount,\n          );\n        }\n      }\n      if (this.slices > 2) {\n        if (grip === \"e\") {\n          move = new Move(\n            new QuantumMove(\"D\", this.slices - 1, 2),\n            move.amount,\n          );\n        } else if (grip === \"m\") {\n          move = new Move(\n            new QuantumMove(\"L\", this.slices - 1, 2),\n            move.amount,\n          );\n        } else if (grip === \"s\") {\n          move = new Move(\n            new QuantumMove(\"F\", this.slices - 1, 2),\n            move.amount,\n          );\n        }\n      }\n    }\n    return move;\n  }\n\n  // do we want to map slice moves to E/M/S instead of 2U/etc.?\n  public notationToExternal(move: Move): Move {\n    const grip = move.family;\n    if (!move.innerLayer && !move.outerLayer) {\n      if (grip === \"Rv\") {\n        return new Move(\"x\", move.amount);\n      } else if (grip === \"Uv\") {\n        return new Move(\"y\", move.amount);\n      } else if (grip === \"Fv\") {\n        return new Move(\"z\", move.amount);\n      } else if (grip === \"Lv\") {\n        return new Move(\"x\", -move.amount);\n      } else if (grip === \"Dv\") {\n        return new Move(\"y\", -move.amount);\n      } else if (grip === \"Bv\") {\n        return new Move(\"z\", -move.amount);\n      }\n    }\n    return move;\n  }\n}\n", "import { Move, QuantumMove } from \"../../alg\";\nimport type { FaceNameSwizzler } from \"../FaceNameSwizzler\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\nconst pyraminxFamilyMap: Record<string, string> = {\n  U: \"frl\",\n  L: \"fld\",\n  R: \"fdr\",\n  B: \"dlr\",\n  u: \"FRL\",\n  l: \"FLD\",\n  r: \"FDR\",\n  b: \"DLR\",\n  Uv: \"FRLv\",\n  Lv: \"FLDv\",\n  Rv: \"FDRv\",\n  Bv: \"DLRv\",\n  D: \"D\",\n  F: \"F\",\n  BL: \"L\",\n  BR: \"R\",\n};\nconst tetraminxFamilyMap: Record<string, string> = {\n  U: \"FRL\",\n  L: \"FLD\",\n  R: \"FDR\",\n  B: \"DLR\",\n  u: \"frl\",\n  l: \"fld\",\n  r: \"fdr\",\n  b: \"dlr\",\n  Uv: \"FRLv\",\n  Lv: \"FLDv\",\n  Rv: \"FDRv\",\n  Bv: \"DLRv\",\n  D: \"D\",\n  F: \"F\",\n  BL: \"L\",\n  BR: \"R\",\n  d: \"d\",\n  f: \"f\",\n  bl: \"l\",\n  br: \"r\",\n};\n\nconst pyraminxFamilyMapWCA: Record<string, string> = {\n  U: \"FRL\",\n  L: \"FLD\",\n  R: \"FDR\",\n  B: \"DLR\",\n};\n\nconst pyraminxExternalQuantumY = new QuantumMove(\"y\");\nconst pyraminxInternalQuantumY = new QuantumMove(\"Dv\");\n\nexport class PyraminxNotationMapper implements NotationMapper {\n  protected wcaHack: boolean = false;\n  map: Record<string, string> = pyraminxFamilyMap;\n\n  constructor(private child: FaceNameSwizzler) {}\n\n  public notationToInternal(move: Move): Move | null {\n    if (this.wcaHack && move.innerLayer === 2 && move.outerLayer === null) {\n      const newFamilyWCA = pyraminxFamilyMapWCA[move.family];\n      if (newFamilyWCA) {\n        return new Move(\n          new QuantumMove(newFamilyWCA, move.innerLayer, move.outerLayer),\n          move.amount,\n        );\n      }\n    }\n    const newFamily = this.map[move.family];\n\n    if (newFamily) {\n      return new Move(\n        new QuantumMove(newFamily, move.innerLayer, move.outerLayer),\n        move.amount,\n      );\n    } else if (pyraminxExternalQuantumY.isIdentical(move.quantum)) {\n      return new Move(pyraminxInternalQuantumY, -move.amount);\n    } else {\n      return null;\n    }\n  }\n\n  // we never rewrite click moves to these moves.\n  public notationToExternal(move: Move): Move | null {\n    if (this.wcaHack && move.innerLayer === 2 && move.outerLayer === null) {\n      for (const [external, internal] of Object.entries(pyraminxFamilyMapWCA)) {\n        if (this.child.spinmatch(move.family, internal)) {\n          return new Move(\n            new QuantumMove(external, move.innerLayer, move.outerLayer),\n            move.amount,\n          );\n        }\n      }\n    }\n    for (const [external, internal] of Object.entries(this.map)) {\n      if (this.child.spinmatch(move.family, internal)) {\n        return new Move(\n          new QuantumMove(external, move.innerLayer, move.outerLayer),\n          move.amount,\n        );\n      }\n    }\n    if (pyraminxInternalQuantumY.isIdentical(move.quantum)) {\n      return new Move(pyraminxExternalQuantumY, -move.amount);\n    } else {\n      return null;\n    }\n  }\n}\n\nexport class TetraminxNotationMapper extends PyraminxNotationMapper {\n  wcaHack = true;\n\n  constructor(child: FaceNameSwizzler) {\n    super(child);\n    this.map = tetraminxFamilyMap;\n  }\n}\n", "import { Move, QuantumMove } from \"../../alg\";\nimport type { FaceNameSwizzler } from \"../FaceNameSwizzler\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\nconst skewbFamilyMap: Record<string, string> = {\n  U: \"UBL\",\n  UL: \"ULF\",\n  F: \"UFR\",\n  UR: \"URB\",\n  B: \"DBL\",\n  D: \"DFR\",\n  L: \"DLF\",\n  R: \"DRB\",\n  Uv: \"UBLv\",\n  ULv: \"ULFv\",\n  Fv: \"UFRv\",\n  URv: \"URBv\",\n  Bv: \"DBLv\",\n  Dv: \"DFRv\",\n  Lv: \"DLFv\",\n  Rv: \"DRBv\",\n};\n\n// TODO: combine using a similar table.\nconst skewbExternalQuantumX = new QuantumMove(\"x\");\nconst skewbInternalQuantumX = new QuantumMove(\"Rv\");\nconst skewbInternalQuantumXPrime = new QuantumMove(\"Lv\");\nconst skewbExternalQuantumY = new QuantumMove(\"y\");\nconst skewbInternalQuantumY = new QuantumMove(\"Uv\");\nconst skewbInternalQuantumYPrime = new QuantumMove(\"Dv\");\nconst skewbExternalQuantumZ = new QuantumMove(\"z\");\nconst skewbInternalQuantumZ = new QuantumMove(\"Fv\");\nconst skewbInternalQuantumZPrime = new QuantumMove(\"Bv\");\n\nexport class SkewbNotationMapper implements NotationMapper {\n  constructor(private child: FaceNameSwizzler) {}\n\n  public notationToInternal(move: Move): Move | null {\n    if (move.innerLayer || move.outerLayer) {\n      return null;\n    }\n    const newFamily = skewbFamilyMap[move.family];\n    if (newFamily) {\n      return new Move(\n        new QuantumMove(newFamily, move.outerLayer, move.innerLayer),\n        move.amount,\n      );\n    }\n    if (skewbExternalQuantumX.isIdentical(move.quantum)) {\n      return new Move(skewbInternalQuantumX, move.amount);\n    }\n    if (skewbExternalQuantumY.isIdentical(move.quantum)) {\n      return new Move(skewbInternalQuantumY, move.amount);\n    }\n    if (skewbExternalQuantumZ.isIdentical(move.quantum)) {\n      return new Move(skewbInternalQuantumZ, move.amount);\n    }\n    return null;\n    /*\n       *   (1) We are not including x/y/z in Skewb; they aren't WCA notation and\n       *   it's unclear anyone needs them for reconstructions.\n       *\n    } else if (move.family === \"x\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"Rv\", move.amount);\n    } else if (move.family === \"y\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"Uv\", move.amount);\n    } else if (move.family === \"z\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"Fv\", move.amount);\n       */\n  }\n\n  // we never rewrite click moves to these moves.\n  public notationToExternal(move: Move): Move | null {\n    for (const [external, internal] of Object.entries(skewbFamilyMap)) {\n      if (this.child.spinmatchv(move.family, internal)) {\n        return new Move(\n          new QuantumMove(external, move.innerLayer, move.outerLayer),\n          move.amount,\n        );\n      }\n    }\n    if (skewbInternalQuantumX.isIdentical(move.quantum)) {\n      return new Move(skewbExternalQuantumX, move.amount);\n    }\n    if (skewbInternalQuantumXPrime.isIdentical(move.quantum)) {\n      return new Move(skewbExternalQuantumX, -move.amount);\n    }\n    if (skewbInternalQuantumY.isIdentical(move.quantum)) {\n      return new Move(skewbExternalQuantumY, move.amount);\n    }\n    if (skewbInternalQuantumYPrime.isIdentical(move.quantum)) {\n      return new Move(skewbExternalQuantumY, -move.amount);\n    }\n    if (skewbInternalQuantumZ.isIdentical(move.quantum)) {\n      return new Move(skewbExternalQuantumZ, move.amount);\n    }\n    if (skewbInternalQuantumZPrime.isIdentical(move.quantum)) {\n      return new Move(skewbExternalQuantumZ, -move.amount);\n    }\n    return null;\n    /*\n       *   See (1) above.\n       *\n    if (move.family === \"Rv\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"x\", move.amount);\n    } else if (move.family === \"Uv\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"y\", move.amount);\n    } else if (move.family === \"Fv\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"z\", move.amount);\n       */\n    // } else {\n    //   return null;\n    // }\n  }\n}\n", "import { parsePuzzleDescription, PuzzleDescription } from \"./PuzzleGeometry\";\n\nexport function parseOptions(argv: string[]): {\n  puzzleDescription: PuzzleDescription | null;\n  options: PuzzleGeometryOptions;\n} {\n  let argp = 0;\n  const options: PuzzleGeometryOptions = {};\n  while (argp < argv.length && argv[argp][0] === \"-\") {\n    const option = argv[argp++];\n    if (option === \"--rotations\") {\n      options.addRotations = true;\n    } else if (option === \"--allmoves\") {\n      options.allMoves = true;\n    } else if (option === \"--outerblockmoves\") {\n      options.outerBlockMoves = true;\n    } else if (option === \"--vertexmoves\") {\n      options.vertexMoves = true;\n    } else if (option === \"--nocorners\") {\n      options.includeCornerOrbits = false;\n    } else if (option === \"--noedges\") {\n      options.includeEdgeOrbits = false;\n    } else if (option === \"--noorientation\") {\n      options.fixedOrientation = true;\n    } else if (option === \"--nocenters\") {\n      options.includeCenterOrbits = false;\n    } else if (option === \"--omit\") {\n      options.excludeOrbits = argv[argp].split(\",\");\n      argp++;\n    } else if (option === \"--moves\") {\n      options.moveList = argv[argp].split(\",\");\n      argp++;\n    } else if (option === \"--optimize\") {\n      options.optimizeOrbits = true;\n    } else if (option === \"--scramble\") {\n      options.scrambleAmount = 100;\n    } else if (option === \"--fixcorner\") {\n      options.fixedPieceType = \"v\";\n    } else if (option === \"--fixedge\") {\n      options.fixedPieceType = \"e\";\n    } else if (option === \"--fixcenter\") {\n      options.fixedPieceType = \"f\";\n    } else if (option === \"--orientcenters\") {\n      options.orientCenters = true;\n    } else if (option === \"--puzzleorientation\") {\n      options.puzzleOrientation = JSON.parse(argv[argp]); // TODO: Validate input.\n      argp++;\n    } else {\n      throw new Error(\"Bad option: \" + option);\n    }\n  }\n  const puzzleDescription = parsePuzzleDescription(argv.slice(argp).join(\" \"));\n  return { puzzleDescription, options };\n}\n\ntype FaceName = string;\ntype OrientationDirection = [number, number, number];\nexport type FaceBasedOrientationDescription = [\n  [FaceName, OrientationDirection],\n  [FaceName, OrientationDirection],\n];\nexport type BaseFaceCount = 4 | 6 | 8 | 12 | 20;\nexport type FaceBasedOrientationDescriptionLookup = Record<\n  BaseFaceCount,\n  FaceBasedOrientationDescription\n>;\n\nfunction asstructured(v: any): any {\n  if (typeof v === \"string\") {\n    return JSON.parse(v);\n  }\n  return v;\n}\nfunction asboolean(v: any): boolean {\n  if (typeof v === \"string\") {\n    if (v === \"false\") {\n      return false;\n    }\n    return true;\n  } else {\n    return v ? true : false;\n  }\n}\n\nexport class PuzzleGeometryFullOptions {\n  verbosity: number = 0; // verbosity (console.log)\n\n  allMoves: boolean = false; // generate all slice moves in ksolve\n  outerBlockMoves: boolean; // generate outer block moves\n  vertexMoves: boolean = false; // generate vertex moves\n  addRotations: boolean = false; // add symmetry information to ksolve output\n  moveList: string[] | null = null; // move list to generate\n\n  fixedOrientation: boolean = false; // eliminate any orientations\n  fixedPieceType: null | \"e\" | \"v\" | \"f\" = null; // fix a piece?\n  orientCenters: boolean = false; // orient centers?\n\n  // TODO: Group these into a single object?\n  includeCornerOrbits: boolean = true; // include corner orbits\n  includeCenterOrbits: boolean = true; // include center orbits\n  includeEdgeOrbits: boolean = true; // include edge orbits\n  // Overrides the previous options.\n  excludeOrbits: string[] = []; // exclude these orbits\n  optimizeOrbits: boolean = false; // optimize PermOri\n\n  grayCorners: boolean = false; // make corner sets gray\n  grayCenters: boolean = false; // make center sets gray\n  grayEdges: boolean = false; // make edge sets gray\n\n  puzzleOrientation: FaceBasedOrientationDescription | null = null; // single puzzle orientation from options\n  puzzleOrientations: FaceBasedOrientationDescriptionLookup | null = null; // puzzle orientation override object from options // TODO: is this needed?\n\n  scrambleAmount: number = 0; // scramble?\n\n  constructor(options: PuzzleGeometryOptions = {}) {\n    Object.assign(this, options);\n  }\n}\n\nexport type PuzzleGeometryOptions = Partial<PuzzleGeometryFullOptions>;\n\nexport function parsePGOptionList(optionlist?: any[]): PuzzleGeometryOptions {\n  const options: PuzzleGeometryOptions = {};\n  if (optionlist !== undefined) {\n    if (optionlist.length % 2 !== 0) {\n      throw new Error(\"Odd length in option list?\");\n    }\n    for (let i = 0; i < optionlist.length; i += 2) {\n      if (optionlist[i] === \"verbose\") {\n        options.verbosity = (options.verbosity ?? 0) + 1;\n      } else if (optionlist[i] === \"quiet\") {\n        options.verbosity = 0;\n      } else if (optionlist[i] === \"allmoves\") {\n        options.allMoves = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"outerblockmoves\") {\n        options.outerBlockMoves = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"vertexmoves\") {\n        options.vertexMoves = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"rotations\") {\n        options.addRotations = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"cornersets\") {\n        options.includeCornerOrbits = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"centersets\") {\n        options.includeCenterOrbits = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"edgesets\") {\n        options.includeEdgeOrbits = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"omit\") {\n        options.excludeOrbits = optionlist[i + 1];\n      } else if (optionlist[i] === \"graycorners\") {\n        options.grayCorners = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"graycenters\") {\n        options.grayCenters = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"grayedges\") {\n        options.grayEdges = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"movelist\") {\n        options.moveList = asstructured(optionlist[i + 1]);\n      } else if (optionlist[i] === \"killorientation\") {\n        options.fixedOrientation = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"optimize\") {\n        options.optimizeOrbits = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"scramble\") {\n        options.scrambleAmount = optionlist[i + 1];\n      } else if (optionlist[i] === \"fix\") {\n        options.fixedPieceType = optionlist[i + 1];\n      } else if (optionlist[i] === \"orientcenters\") {\n        options.orientCenters = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"puzzleorientation\") {\n        options.puzzleOrientation = asstructured(optionlist[i + 1]);\n      } else if (optionlist[i] === \"puzzleorientations\") {\n        options.puzzleOrientations = asstructured(optionlist[i + 1]);\n      } else {\n        throw new Error(\n          \"Bad option while processing option list \" + optionlist[i],\n        );\n      }\n    }\n  }\n  return options;\n}\n", "const zeroCache: number[][] = [];\nconst iotaCache: number[][] = [];\n\nexport function zeros(n: number): number[] {\n  if (!zeroCache[n]) {\n    const c = Array(n);\n    for (let i = 0; i < n; i++) {\n      c[i] = 0;\n    }\n    zeroCache[n] = c;\n  }\n  return zeroCache[n];\n}\n\nexport function iota(n: number): number[] {\n  if (!iotaCache[n]) {\n    const c = Array(n);\n    for (let i = 0; i < n; i++) {\n      c[i] = i;\n    }\n    iotaCache[n] = c;\n  }\n  return iotaCache[n];\n}\n\nexport function identity(n: number): Perm {\n  return new Perm(iota(n));\n}\n\nexport function random(n: number): Perm {\n  // random\n  const c = Array(n);\n  for (let i = 0; i < n; i++) {\n    c[i] = i;\n  }\n  for (let i = 0; i < n; i++) {\n    const j = i + Math.floor((n - i) * Math.random());\n    const t = c[i];\n    c[i] = c[j];\n    c[j] = t;\n  }\n  return new Perm(c);\n}\n\nexport function factorial(a: number): bigint {\n  let r = 1n;\n  while (a > 1) {\n    r *= BigInt(a);\n    a--;\n  }\n  return r;\n}\n\nfunction gcd(a: number, b: number): number {\n  if (a > b) {\n    const t = a;\n    a = b;\n    b = t;\n  }\n  while (a > 0) {\n    const m = b % a;\n    b = a;\n    a = m;\n  }\n  return b;\n}\n\nexport function lcm(a: number, b: number): number {\n  return (a / gcd(a, b)) * b;\n}\n\nexport class Perm {\n  public n: number; // length\n  public p: number[]; // The permutation itself\n  constructor(a: number[]) {\n    this.n = a.length;\n    this.p = a;\n  }\n\n  public toString(): string {\n    // stringify\n    return \"Perm[\" + this.p.join(\" \") + \"]\";\n  }\n\n  public mul(p2: Perm): Perm {\n    // multiply\n    const c: number[] = Array(this.n);\n    for (let i = 0; i < this.n; i++) {\n      c[i] = p2.p[this.p[i]];\n    }\n    return new Perm(c);\n  }\n\n  public rmul(p2: Perm): Perm {\n    // multiply the other way\n    const c = Array(this.n);\n    for (let i = 0; i < this.n; i++) {\n      c[i] = this.p[p2.p[i]];\n    }\n    return new Perm(c);\n  }\n\n  public inv(): Perm {\n    const c = Array(this.n);\n    for (let i = 0; i < this.n; i++) {\n      c[this.p[i]] = i;\n    }\n    return new Perm(c);\n  }\n\n  public compareTo(p2: Perm): number {\n    // comparison\n    for (let i = 0; i < this.n; i++) {\n      if (this.p[i] !== p2.p[i]) {\n        return this.p[i] - p2.p[i];\n      }\n    }\n    return 0;\n  }\n\n  public toGap(): string {\n    const cyc = new Array<string>();\n    const seen = new Array<boolean>(this.n);\n    for (let i = 0; i < this.p.length; i++) {\n      if (seen[i] || this.p[i] === i) {\n        continue;\n      }\n      const incyc = new Array<number>();\n      for (let j = i; !seen[j]; j = this.p[j]) {\n        incyc.push(1 + j);\n        seen[j] = true;\n      }\n      cyc.push(\"(\" + incyc.join(\",\") + \")\");\n    }\n    return cyc.join(\"\");\n  }\n\n  public order(): number {\n    let r = 1;\n    const seen = new Array<boolean>(this.n);\n    for (let i = 0; i < this.p.length; i++) {\n      if (seen[i] || this.p[i] === i) {\n        continue;\n      }\n      let cs = 0;\n      for (let j = i; !seen[j]; j = this.p[j]) {\n        cs++;\n        seen[j] = true;\n      }\n      r = lcm(r, cs);\n    }\n    return r;\n  }\n}\n", "import { Move } from \"../alg\";\nimport type { KPuzzleDefinition, KTransformationData } from \"../kpuzzle\"; // TODO\nimport { NullMapper } from \"./notation-mapping\";\nimport type { NotationMapper } from \"./notation-mapping/NotationMapper\";\n/* tslint:disable no-bitwise */\n/* tslint:disable prefer-for-of */ import {\n  factorial,\n  iota,\n  lcm,\n  Perm,\n  zeros,\n} from \"./Perm\";\nexport class PGOrbitDef {\n  constructor(public size: number, public mod: number) {}\n  public reassemblySize(): bigint {\n    return factorial(this.size) * BigInt(this.mod) ** BigInt(this.size);\n  }\n}\n\nlet lastGlobalDefinitionCounter = 0;\n\nexport function externalName(\n  mapper: NotationMapper,\n  moveString: string,\n): string {\n  const mv = Move.fromString(moveString);\n  const mv2 = mapper.notationToExternal(mv);\n  if (mv2 === null || mv === mv2) {\n    return moveString;\n  }\n  return mv2.toString();\n}\n\nexport class PGOrbitsDef {\n  constructor(\n    public orbitnames: string[],\n    private orbitdefs: PGOrbitDef[],\n    public solved: VisibleState,\n    public movenames: string[],\n    public moveops: PGTransform[],\n    public isRotation: boolean[],\n    public forcenames: boolean[],\n  ) {}\n\n  public transformToKTransformationData(t: PGTransform): KTransformationData {\n    const mp: { [orbitName: string]: any } = {};\n    for (let j = 0; j < this.orbitnames.length; j++) {\n      mp[this.orbitnames[j]] = t.orbits[j].toKPuzzle();\n    }\n    return mp;\n  }\n\n  public static transformToKTransformationData(\n    orbitnames: string[],\n    t: PGTransform,\n  ): KTransformationData {\n    const mp: { [orbitName: string]: any } = {};\n    for (let j = 0; j < orbitnames.length; j++) {\n      mp[orbitnames[j]] = t.orbits[j].toKPuzzle();\n    }\n    return mp;\n  }\n\n  private describeSet(s: number, r: string[], mapper: NotationMapper): void {\n    const n = this.orbitdefs[s].size;\n    const m = new Array(n);\n    for (let i = 0; i < n; i++) {\n      m[i] = [];\n    }\n    for (let i = 0; i < this.movenames.length; i++) {\n      if (this.isRotation[i]) {\n        continue;\n      }\n      let mvname = this.movenames[i];\n      if (!this.forcenames[i]) {\n        mvname = externalName(mapper, mvname);\n        if (mvname[mvname.length - 1] === \"'\") {\n          mvname = mvname.substring(0, mvname.length - 1);\n        }\n      }\n      const pd = this.moveops[i].orbits[s];\n      for (let j = 0; j < n; j++) {\n        if (pd.perm[j] != j || pd.ori[j] != 0) {\n          m[j].push(mvname);\n        }\n      }\n    }\n    for (let j = 0; j < n; j++) {\n      r.push(\"# \" + (j + 1) + \" \" + m[j].join(\" \"));\n    }\n  }\n\n  public toKsolve(\n    name: string,\n    mapper: NotationMapper = new NullMapper(),\n  ): string[] {\n    const result = [];\n    result.push(\"Name \" + name);\n    result.push(\"\");\n    for (let i = 0; i < this.orbitnames.length; i++) {\n      result.push(\n        `Set ${this.orbitnames[i]} ${this.orbitdefs[i].size} ${this.orbitdefs[i].mod}`,\n      );\n      this.describeSet(i, result, mapper);\n    }\n    result.push(\"\");\n    result.push(\"Solved\");\n    for (let i = 0; i < this.orbitnames.length; i++) {\n      this.solved.orbits[i].appendDefinition(\n        result,\n        this.orbitnames[i],\n        false,\n        false,\n      );\n    }\n    result.push(\"End\");\n    for (let i = 0; i < this.movenames.length; i++) {\n      result.push(\"\");\n      let name = this.movenames[i];\n      if (!this.forcenames[i]) {\n        name = externalName(mapper, this.movenames[i]);\n      }\n      let doinv = false;\n      if (name[name.length - 1] === \"'\") {\n        doinv = true;\n        name = name.substring(0, name.length - 1);\n      }\n      result.push(\"Move \" + name);\n      for (let j = 0; j < this.orbitnames.length; j++) {\n        if (doinv) {\n          this.moveops[i].orbits[j]\n            .inv()\n            .appendDefinition(result, this.orbitnames[j], true);\n        } else {\n          this.moveops[i].orbits[j].appendDefinition(\n            result,\n            this.orbitnames[j],\n            true,\n          );\n        }\n      }\n      result.push(\"End\");\n    }\n    // extra blank line on end lets us use join(\"\\n\") to terminate all\n    return result;\n  }\n\n  // TODO: return type.\n  public toKPuzzleDefinition(includemoves: boolean): KPuzzleDefinition {\n    const orbits: KPuzzleDefinition[\"orbits\"] = {};\n    const start: KPuzzleDefinition[\"startStateData\"] = {};\n    for (let i = 0; i < this.orbitnames.length; i++) {\n      orbits[this.orbitnames[i]] = {\n        numPieces: this.orbitdefs[i].size,\n        numOrientations: this.orbitdefs[i].mod,\n      };\n      const startTransformation = this.solved.orbits[i].toKPuzzle();\n      start[this.orbitnames[i]] = {\n        pieces: startTransformation.permutation,\n        orientation: startTransformation.orientation,\n      };\n    }\n    const moves: { [moveName: string]: any } = {};\n    if (includemoves) {\n      for (let i = 0; i < this.movenames.length; i++) {\n        moves[this.movenames[i]] = this.transformToKTransformationData(\n          this.moveops[i],\n        );\n      }\n    }\n    return {\n      name: `PG3D #${++lastGlobalDefinitionCounter}`,\n      orbits,\n      startStateData: start,\n      moves,\n    };\n  }\n\n  public optimize(): PGOrbitsDef {\n    const neworbitnames: string[] = [];\n    const neworbitdefs: PGOrbitDef[] = [];\n    const newsolved: PGOrbit[] = [];\n    const newmoveops: PGOrbit[][] = [];\n    for (let j = 0; j < this.moveops.length; j++) {\n      newmoveops.push([]);\n    }\n    for (let i = 0; i < this.orbitdefs.length; i++) {\n      const om = this.orbitdefs[i].mod;\n      const n = this.orbitdefs[i].size;\n      const du = new DisjointUnion(n);\n      const changed = new Array<boolean>(this.orbitdefs[i].size);\n      for (let k = 0; k < n; k++) {\n        changed[k] = false;\n      }\n      // don't consider rotations when optimizing\n      for (let j = 0; j < this.moveops.length; j++) {\n        if (!this.isRotation[j]) {\n          for (let k = 0; k < n; k++) {\n            if (\n              this.moveops[j].orbits[i].perm[k] !== k ||\n              this.moveops[j].orbits[i].ori[k] !== 0\n            ) {\n              changed[k] = true;\n              du.union(k, this.moveops[j].orbits[i].perm[k]);\n            }\n          }\n        }\n      }\n      let keepori = true;\n      // right now we kill ori only if solved is unique and\n      // if we can kill it completely.  This is not all the optimization\n      // we can perform.\n      if (om > 1) {\n        keepori = false;\n        const duo = new DisjointUnion(this.orbitdefs[i].size * om);\n        for (let j = 0; j < this.moveops.length; j++) {\n          for (let k = 0; k < n; k++) {\n            if (\n              this.moveops[j].orbits[i].perm[k] !== k ||\n              this.moveops[j].orbits[i].ori[k] !== 0\n            ) {\n              for (let o = 0; o < om; o++) {\n                duo.union(\n                  k * om + o,\n                  this.moveops[j].orbits[i].perm[k] * om +\n                    ((o + this.moveops[j].orbits[i].ori[k]) % om),\n                );\n              }\n            }\n          }\n        }\n        for (let j = 0; !keepori && j < n; j++) {\n          for (let o = 1; o < om; o++) {\n            if (duo.find(j * om) === duo.find(j * om + o)) {\n              keepori = true;\n            }\n          }\n        }\n        for (let j = 0; !keepori && j < n; j++) {\n          for (let k = 0; k < j; k++) {\n            if (\n              this.solved.orbits[i].perm[j] === this.solved.orbits[i].perm[k]\n            ) {\n              keepori = true;\n            }\n          }\n        }\n      }\n      // is there just one result set, or more than one?\n      let nontriv = -1;\n      let multiple = false;\n      for (let j = 0; j < this.orbitdefs[i].size; j++) {\n        if (changed[j]) {\n          const h = du.find(j);\n          if (nontriv < 0) {\n            nontriv = h;\n          } else if (nontriv !== h) {\n            multiple = true;\n          }\n        }\n      }\n      for (let j = 0; j < this.orbitdefs[i].size; j++) {\n        if (!changed[j]) {\n          continue;\n        }\n        const h = du.find(j);\n        if (h !== j) {\n          continue;\n        }\n        const no: number[] = [];\n        const on: number[] = [];\n        let nv = 0;\n        for (let k = 0; k < this.orbitdefs[i].size; k++) {\n          if (du.find(k) === j) {\n            no[nv] = k;\n            on[k] = nv;\n            nv++;\n          }\n        }\n        if (multiple) {\n          neworbitnames.push(`${this.orbitnames[i]}_p${j}`);\n        } else {\n          neworbitnames.push(this.orbitnames[i]);\n        }\n        if (keepori) {\n          neworbitdefs.push(new PGOrbitDef(nv, this.orbitdefs[i].mod));\n          newsolved.push(this.solved.orbits[i].remapVS(no, nv));\n          for (let k = 0; k < this.moveops.length; k++) {\n            newmoveops[k].push(this.moveops[k].orbits[i].remap(no, on, nv));\n          }\n        } else {\n          neworbitdefs.push(new PGOrbitDef(nv, 1));\n          newsolved.push(this.solved.orbits[i].remapVS(no, nv).killOri());\n          for (let k = 0; k < this.moveops.length; k++) {\n            newmoveops[k].push(\n              this.moveops[k].orbits[i].remap(no, on, nv).killOri(),\n            );\n          }\n        }\n      }\n    }\n    return new PGOrbitsDef(\n      neworbitnames,\n      neworbitdefs,\n      new VisibleState(newsolved),\n      this.movenames,\n      newmoveops.map((_) => new PGTransform(_)),\n      this.isRotation,\n      this.forcenames,\n    );\n  }\n\n  // replace the solved state with a new scrambled state.\n  public scramble(n: number): void {\n    this.solved = this.solved.mul(this.getScrambleTransformation(n));\n  }\n\n  // generate a new \"random\" position based on an entropy pool\n  // this should be significantly faster and more random than just\n  // doing a large number of random moves, especially on big puzzles.\n  public getScrambleTransformation(n: number): PGTransform {\n    // don't let n be too tiny\n    if (n < 100) {\n      n = 100;\n    }\n    const pool: PGTransform[] = [];\n    for (let i = 0; i < this.moveops.length; i++) {\n      pool[i] = this.moveops[i];\n    }\n    for (let i = 0; i < pool.length; i++) {\n      const j = Math.floor(Math.random() * pool.length);\n      const t = pool[i];\n      pool[i] = pool[j];\n      pool[j] = t;\n    }\n    if (n < pool.length) {\n      n = pool.length;\n    }\n    for (let i = 0; i < n; i++) {\n      const ri = Math.floor(Math.random() * pool.length);\n      const rj = Math.floor(Math.random() * pool.length);\n      const rm = Math.floor(Math.random() * this.moveops.length);\n      pool[ri] = pool[ri].mul(pool[rj]).mul(this.moveops[rm]);\n      if (Math.random() < 0.1) {\n        // break up parity\n        pool[ri] = pool[ri].mul(this.moveops[rm]);\n      }\n    }\n    let s = pool[0];\n    for (let i = 1; i < pool.length; i++) {\n      s = s.mul(pool[i]);\n    }\n    return s;\n  }\n\n  public reassemblySize(): bigint {\n    let n = 1n;\n    for (let i = 0; i < this.orbitdefs.length; i++) {\n      n *= this.orbitdefs[i].reassemblySize();\n    }\n    return n;\n  }\n}\n\nexport class PGOrbit {\n  private static kcache: Record<string, number[]>[] = [];\n\n  public static e(n: number, mod: number): PGOrbit {\n    return new PGOrbit(iota(n), zeros(n), mod);\n  }\n\n  constructor(\n    public perm: number[],\n    public ori: number[],\n    public orimod: number,\n  ) {}\n\n  public mul(b: PGOrbit): PGOrbit {\n    const n = this.perm.length;\n    const newPerm = new Array<number>(n);\n    if (this.orimod === 1) {\n      for (let i = 0; i < n; i++) {\n        newPerm[i] = this.perm[b.perm[i]];\n      }\n      return new PGOrbit(newPerm, this.ori, this.orimod);\n    } else {\n      const newOri = new Array<number>(n);\n      for (let i = 0; i < n; i++) {\n        newPerm[i] = this.perm[b.perm[i]];\n        newOri[i] = (this.ori[b.perm[i]] + b.ori[i]) % this.orimod;\n      }\n      return new PGOrbit(newPerm, newOri, this.orimod);\n    }\n  }\n\n  public inv(): PGOrbit {\n    const n = this.perm.length;\n    const newPerm = new Array<number>(n);\n    const newOri = new Array<number>(n);\n    for (let i = 0; i < n; i++) {\n      newPerm[this.perm[i]] = i;\n      newOri[this.perm[i]] = (this.orimod - this.ori[i]) % this.orimod;\n    }\n    return new PGOrbit(newPerm, newOri, this.orimod);\n  }\n\n  public equal(b: PGOrbit): boolean {\n    const n = this.perm.length;\n    for (let i = 0; i < n; i++) {\n      if (this.perm[i] !== b.perm[i] || this.ori[i] !== b.ori[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // in-place mutator\n  public killOri(): this {\n    const n = this.perm.length;\n    for (let i = 0; i < n; i++) {\n      this.ori[i] = 0;\n    }\n    this.orimod = 1;\n    return this;\n  }\n\n  public toPerm(): Perm {\n    const o = this.orimod;\n    if (o === 1) {\n      return new Perm(this.perm);\n    }\n    const n = this.perm.length;\n    const newPerm = new Array<number>(n * o);\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < o; j++) {\n        newPerm[i * o + j] = o * this.perm[i] + ((this.ori[i] + j) % o);\n      }\n    }\n    return new Perm(newPerm);\n  }\n\n  // returns tuple of sets of identical pieces in this orbit\n  public identicalPieces(): number[][] {\n    const done: boolean[] = [];\n    const n = this.perm.length;\n    const r: number[][] = [];\n    for (let i = 0; i < n; i++) {\n      const v = this.perm[i];\n      if (done[v] === undefined) {\n        const s: number[] = [i];\n        done[v] = true;\n        for (let j = i + 1; j < n; j++) {\n          if (this.perm[j] === v) {\n            s.push(j);\n          }\n        }\n        r.push(s);\n      }\n    }\n    return r;\n  }\n\n  public order(): number {\n    // can be made more efficient\n    return this.toPerm().order();\n  }\n\n  public isIdentity(): boolean {\n    const n = this.perm.length;\n    if (this.perm === iota(n) && this.ori === zeros(n)) {\n      return true;\n    }\n    for (let i = 0; i < n; i++) {\n      if (this.perm[i] !== i || this.ori[i] !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private zeroOris(): boolean {\n    const n = this.perm.length;\n    if (this.ori === zeros(n)) {\n      return true;\n    }\n    for (let i = 0; i < n; i++) {\n      if (this.ori[i] !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public remap(no: number[], on: number[], nv: number): PGOrbit {\n    const newPerm = new Array<number>(nv);\n    const newOri = new Array<number>(nv);\n    for (let i = 0; i < nv; i++) {\n      newPerm[i] = on[this.perm[no[i]]];\n      newOri[i] = this.ori[no[i]];\n    }\n    return new PGOrbit(newPerm, newOri, this.orimod);\n  }\n\n  public remapVS(no: number[], nv: number): PGOrbit {\n    const newPerm = new Array<number>(nv);\n    const newOri = new Array<number>(nv);\n    let nextNew = 0;\n    const reassign = [];\n    for (let i = 0; i < nv; i++) {\n      const ov = this.perm[no[i]];\n      if (reassign[ov] === undefined) {\n        reassign[ov] = nextNew++;\n      }\n      newPerm[i] = reassign[ov];\n      newOri[i] = this.ori[no[i]];\n    }\n    return new PGOrbit(newPerm, newOri, this.orimod);\n  }\n\n  public appendDefinition(\n    result: string[],\n    name: string,\n    useVS: boolean,\n    concise: boolean = true,\n  ): void {\n    if (concise && this.isIdentity()) {\n      return;\n    }\n    result.push(name);\n    result.push(this.perm.map((_: number) => _ + 1).join(\" \"));\n    if (!this.zeroOris()) {\n      if (useVS) {\n        const newori = new Array<number>(this.ori.length);\n        for (let i = 0; i < newori.length; i++) {\n          newori[this.perm[i]] = this.ori[i];\n        }\n        result.push(newori.join(\" \"));\n      } else {\n        result.push(this.ori.join(\" \"));\n      }\n    }\n  }\n\n  // TODO: return type\n  public toKPuzzle(): Record<string, number[]> {\n    const n = this.perm.length;\n    if (this.isIdentity()) {\n      if (!PGOrbit.kcache[n]) {\n        PGOrbit.kcache[n] = { permutation: iota(n), orientation: zeros(n) };\n      }\n      return PGOrbit.kcache[n];\n    } else {\n      return { permutation: this.perm, orientation: this.ori };\n    }\n  }\n}\nexport class PGTransformBase {\n  constructor(public orbits: PGOrbit[]) {}\n  public internalMul(b: PGTransformBase): PGOrbit[] {\n    const newOrbits: PGOrbit[] = [];\n    for (let i = 0; i < this.orbits.length; i++) {\n      newOrbits.push(this.orbits[i].mul(b.orbits[i]));\n    }\n    return newOrbits;\n  }\n\n  protected internalInv(): PGOrbit[] {\n    const newOrbits: PGOrbit[] = [];\n    for (const orbit of this.orbits) {\n      newOrbits.push(orbit.inv());\n    }\n    return newOrbits;\n  }\n\n  public equal(b: PGTransformBase): boolean {\n    for (let i = 0; i < this.orbits.length; i++) {\n      if (!this.orbits[i].equal(b.orbits[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  protected killOri(): this {\n    for (const orbit of this.orbits) {\n      orbit.killOri();\n    }\n    return this;\n  }\n\n  public toPerm(): Perm {\n    const perms = new Array<Perm>();\n    let n = 0;\n    for (const orbit of this.orbits) {\n      const p = orbit.toPerm();\n      perms.push(p);\n      n += p.n;\n    }\n    const newPerm = new Array<number>(n);\n    n = 0;\n    for (const p of perms) {\n      for (let j = 0; j < p.n; j++) {\n        newPerm[n + j] = n + p.p[j];\n      }\n      n += p.n;\n    }\n    return new Perm(newPerm);\n  }\n\n  public identicalPieces(): number[][] {\n    const r: number[][] = [];\n    let n = 0;\n    for (const orbit of this.orbits) {\n      const o = orbit.orimod;\n      const s = orbit.identicalPieces();\n      for (let j = 0; j < s.length; j++) {\n        r.push(s[j].map((_) => _ * o + n));\n      }\n      n += o * orbit.perm.length;\n    }\n    return r;\n  }\n\n  public order(): number {\n    let r = 1;\n    for (const orbit of this.orbits) {\n      r = lcm(r, orbit.order());\n    }\n    return r;\n  }\n}\nexport class PGTransform extends PGTransformBase {\n  constructor(orbits: PGOrbit[]) {\n    super(orbits);\n  }\n\n  public mul(b: PGTransform): PGTransform {\n    return new PGTransform(this.internalMul(b));\n  }\n\n  public mulScalar(n: number): PGTransform {\n    if (n === 0) {\n      return this.e();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let t: PGTransform = this;\n    if (n < 0) {\n      t = t.inv();\n      n = -n;\n    }\n    while ((n & 1) === 0) {\n      t = t.mul(t);\n      n >>= 1;\n    }\n    if (n === 1) {\n      return t;\n    }\n    let s = t;\n    let r = this.e();\n    while (n > 0) {\n      if (n & 1) {\n        r = r.mul(s);\n      }\n      if (n > 1) {\n        s = s.mul(s);\n      }\n      n >>= 1;\n    }\n    return r;\n  }\n\n  public inv(): PGTransform {\n    return new PGTransform(this.internalInv());\n  }\n\n  public e(): PGTransform {\n    return new PGTransform(\n      this.orbits.map((_: PGOrbit) => PGOrbit.e(_.perm.length, _.orimod)),\n    );\n  }\n}\nexport class VisibleState extends PGTransformBase {\n  constructor(orbits: PGOrbit[]) {\n    super(orbits);\n  }\n\n  public mul(b: PGTransform): VisibleState {\n    return new VisibleState(this.internalMul(b));\n  }\n}\n//  Disjoint set union implementation.\nclass DisjointUnion {\n  private heads: number[];\n  constructor(public n: number) {\n    this.heads = new Array<number>(n);\n    for (let i = 0; i < n; i++) {\n      this.heads[i] = i;\n    }\n  }\n\n  public find(v: number): number {\n    let h = this.heads[v];\n    if (this.heads[h] === h) {\n      return h;\n    }\n    h = this.find(this.heads[h]);\n    this.heads[v] = h;\n    return h;\n  }\n\n  public union(a: number, b: number): void {\n    const ah = this.find(a);\n    const bh = this.find(b);\n    if (ah < bh) {\n      this.heads[bh] = ah;\n    } else if (ah > bh) {\n      this.heads[ah] = bh;\n    }\n  }\n}\nexport function showcanon(g: PGOrbitsDef, disp: (s: string) => void): void {\n  // show information for canonical move derivation\n  const n = g.moveops.length;\n  if (n > 30) {\n    throw new Error(\"Canon info too big for bitmask\");\n  }\n  const orders = [];\n  const commutes = [];\n  for (let i = 0; i < n; i++) {\n    const permA = g.moveops[i];\n    orders.push(permA.order());\n    let bits = 0;\n    for (let j = 0; j < n; j++) {\n      if (j === i) {\n        continue;\n      }\n      const permB = g.moveops[j];\n      if (permA.mul(permB).equal(permB.mul(permA))) {\n        bits |= 1 << j;\n      }\n    }\n    commutes.push(bits);\n  }\n  let curlev: any = {};\n  curlev[0] = 1;\n  for (let d = 0; d < 100; d++) {\n    let sum = 0;\n    const nextlev: any = {};\n    let uniq = 0;\n    for (const sti in curlev) {\n      const st = +sti; // string to number\n      const cnt = curlev[st];\n      sum += cnt;\n      uniq++;\n      for (let mv = 0; mv < orders.length; mv++) {\n        if (\n          ((st >> mv) & 1) === 0 &&\n          (st & commutes[mv] & ((1 << mv) - 1)) === 0\n        ) {\n          const nst = (st & commutes[mv]) | (1 << mv);\n          if (nextlev[nst] === undefined) {\n            nextlev[nst] = 0;\n          }\n          nextlev[nst] += (orders[mv] - 1) * cnt;\n        }\n      }\n    }\n    disp(`${d}: canonseq ${sum} states ${uniq}`);\n    curlev = nextlev;\n  }\n}\n// This is a less effective canonicalization (that happens to work fine\n// for the 3x3x3).  We include this only for comparison.\nexport function showcanon0(g: PGOrbitsDef, disp: (s: string) => void): void {\n  // show information for canonical move derivation\n  const n = g.moveops.length;\n  if (n > 30) {\n    throw new Error(\"Canon info too big for bitmask\");\n  }\n  const orders = [];\n  const commutes = [];\n  for (let i = 0; i < n; i++) {\n    const permA = g.moveops[i];\n    orders.push(permA.order());\n    let bits = 0;\n    for (let j = 0; j < n; j++) {\n      if (j === i) {\n        continue;\n      }\n      const permB = g.moveops[j];\n      if (permA.mul(permB).equal(permB.mul(permA))) {\n        bits |= 1 << j;\n      }\n    }\n    commutes.push(bits);\n  }\n  let curlev: any = {};\n  disp(\"0: canonseq 1\");\n  for (let x = 0; x < orders.length; x++) {\n    curlev[x] = orders[x] - 1;\n  }\n  for (let d = 1; d < 100; d++) {\n    let sum = 0;\n    const nextlev: any = {};\n    let uniq = 0;\n    for (const sti in curlev) {\n      const st = +sti; // string to number\n      const cnt = curlev[st];\n      sum += cnt;\n      uniq++;\n      for (let mv = 0; mv < orders.length; mv++) {\n        if (mv === st || (commutes[mv] & (1 << st) && mv < st)) {\n          continue;\n        }\n        if (nextlev[mv] === undefined) {\n          nextlev[mv] = 0;\n        }\n        nextlev[mv] += (orders[mv] - 1) * cnt;\n      }\n    }\n    disp(`${d}\": canonseq ${sum} states ${uniq}`);\n    curlev = nextlev;\n  }\n}\n", "export type PuzzleDescriptionString = string;\n\nexport const PGPuzzles: { [name: string]: PuzzleDescriptionString } = {\n  \"2x2x2\": \"c f 0\",\n  \"3x3x3\": \"c f 0.333333333333333\",\n  \"4x4x4\": \"c f 0.5 f 0\",\n  \"5x5x5\": \"c f 0.6 f 0.2\",\n  \"6x6x6\": \"c f 0.666666666666667 f 0.333333333333333 f 0\",\n  \"7x7x7\": \"c f 0.714285714285714 f 0.428571428571429 f 0.142857142857143\",\n  \"8x8x8\": \"c f 0.75 f 0.5 f 0.25 f 0\",\n  \"9x9x9\":\n    \"c f 0.777777777777778 f 0.555555555555556 f 0.333333333333333 f 0.111111111111111\",\n  \"10x10x10\": \"c f 0.8 f 0.6 f 0.4 f 0.2 f 0\",\n  \"11x11x11\":\n    \"c f 0.818181818181818 f 0.636363636363636 f 0.454545454545455 f 0.272727272727273 f 0.0909090909090909\",\n  \"12x12x12\":\n    \"c f 0.833333333333333 f 0.666666666666667 f 0.5 f 0.333333333333333 f 0.166666666666667 f 0\",\n  \"13x13x13\":\n    \"c f 0.846153846153846 f 0.692307692307692 f 0.538461538461538 f 0.384615384615385 f 0.230769230769231 f 0.0769230769230769\",\n  \"20x20x20\": \"c f 0 f .1 f .2 f .3 f .4 f .5 f .6 f .7 f .8 f .9\",\n  \"30x30x30\":\n    \"c f 0 f .066667 f .133333 f .2 f .266667 f .333333 f .4 f .466667 f .533333 f .6 f .666667 f .733333 f .8 f .866667 f .933333\",\n  \"40x40x40\":\n    \"c f 0 f .05 f .1 f .15 f .2 f .25 f .3 f .35 f .4 f .45 f .5 f .55 f .6 f .65 f .7 f .75 f .8 f .85 f .9 f .95\",\n  \"skewb\": \"c v 0\",\n  \"master skewb\": \"c v 0.275\",\n  \"professor skewb\": \"c v 0 v 0.38\",\n  \"compy cube\": \"c v 0.915641442663986\",\n  \"helicopter\": \"c e 0.707106781186547\",\n  \"curvy copter\": \"c e 0.83\",\n  \"dino\": \"c v 0.577350269189626\",\n  \"little chop\": \"c e 0\",\n  \"pyramorphix\": \"t e 0\",\n  \"mastermorphix\": \"t e 0.346184634065199\",\n  \"pyraminx\": \"t v 0.333333333333333 v 1.66666666666667\",\n  \"tetraminx\": \"t v 0.333333333333333\",\n  \"master pyraminx\": \"t v 0 v 1 v 2\",\n  \"master tetraminx\": \"t v 0 v 1\",\n  \"professor pyraminx\": \"t v -0.2 v 0.6 v 1.4 v 2.2\",\n  \"professor tetraminx\": \"t v -0.2 v 0.6 v 1.4\",\n  \"Jing pyraminx\": \"t f 0\",\n  \"master pyramorphix\": \"t e 0.866025403784437\",\n  \"megaminx\": \"d f 0.7\",\n  \"gigaminx\": \"d f 0.64 f 0.82\",\n  \"teraminx\": \"d f 0.64 f 0.76 f 0.88\",\n  \"petaminx\": \"d f 0.64 f 0.73 f 0.82 f 0.91\",\n  \"examinx\": \"d f 0.64 f 0.712 f 0.784 f 0.856 f 0.928\",\n  \"zetaminx\": \"d f 0.64 f 0.7 f 0.76 f 0.82 f 0.88 f 0.94\",\n  \"yottaminx\": \"d f 0.64 f 0.6914 f 0.7429 f 0.7943 f 0.8457 f 0.8971 f 0.9486\",\n  \"pentultimate\": \"d f 0\",\n  \"master pentultimate\": \"d f 0.1\",\n  \"elite pentultimate\": \"d f 0 f 0.145905\",\n  // exact value for starminx is sqrt(5(5-2 sqrt(5))/3)\n  \"starminx\": \"d v 0.937962370425399\",\n  \"starminx 2\": \"d f 0.23606797749979\",\n  \"pyraminx crystal\": \"d f 0.447213595499989\",\n  \"chopasaurus\": \"d v 0\",\n  \"big chop\": \"d e 0\",\n  \"skewb diamond\": \"o f 0\",\n  \"FTO\": \"o f 0.333333333333333\",\n  \"master FTO\": \"o f 0.5 f 0\",\n  \"Christopher's jewel\": \"o v 0.577350269189626\",\n  \"octastar\": \"o e 0\",\n  \"Trajber's octahedron\": \"o v 0.433012701892219\",\n  \"radio chop\": \"i f 0\",\n  \"icosamate\": \"i v 0\",\n  \"icosahedron 2\": \"i v 0.18759247376021\",\n  \"icosahedron 3\": \"i v 0.18759247376021 e 0\",\n  \"icosahedron static faces\": \"i v 0.84\",\n  \"icosahedron moving faces\": \"i v 0.73\",\n  \"Eitan's star\": \"i f 0.61803398874989\",\n  \"2x2x2 + dino\": \"c f 0 v 0.577350269189626\",\n  \"2x2x2 + little chop\": \"c f 0 e 0\",\n  \"dino + little chop\": \"c v 0.577350269189626 e 0\",\n  \"2x2x2 + dino + little chop\": \"c f 0 v 0.577350269189626 e 0\",\n  \"megaminx + chopasaurus\": \"d f 0.61803398875 v 0\",\n  \"starminx combo\": \"d f 0.23606797749979 v 0.937962370425399\",\n};\n\nexport type PuzzleName = keyof typeof PGPuzzles;\n", "/* tslint:disable no-bitwise */\n/* tslint:disable prefer-for-of */ // TODO\n\n// We need a quaternion class.  We use this to represent rotations,\n// planes, and points.\n\nconst eps = 1e-9; // TODO: Deduplicate with `PuzzleGeometry`?\n\nexport function centermassface(face: Quat[]): Quat {\n  // calculate a center of a face by averaging points\n  let s = new Quat(0, 0, 0, 0);\n  for (let i = 0; i < face.length; i++) {\n    s = s.sum(face[i]);\n  }\n  return s.smul(1.0 / face.length);\n}\n\nexport function solvethreeplanes(\n  p1: number,\n  p2: number,\n  p3: number,\n  planes: Quat[],\n): any {\n  // find intersection of three planes but only if interior\n  // Takes three indices into a plane array, and returns the point at the\n  // intersection of all three, but only if it is internal to all planes.\n  const p = planes[p1].intersect3(planes[p2], planes[p3]);\n  if (!p) {\n    return p;\n  }\n  for (let i = 0; i < planes.length; i++) {\n    if (i !== p1 && i !== p2 && i !== p3) {\n      const dt = planes[i].b * p.b + planes[i].c * p.c + planes[i].d * p.d;\n      if (\n        (planes[i].a > 0 && dt > planes[i].a) ||\n        (planes[i].a < 0 && dt < planes[i].a)\n      ) {\n        return false;\n      }\n    }\n  }\n  return p;\n}\n\nexport class Quat {\n  constructor(\n    public a: number,\n    public b: number,\n    public c: number,\n    public d: number,\n  ) {}\n\n  public mul(q: Quat): Quat {\n    // Quaternion multiplication\n    return new Quat(\n      this.a * q.a - this.b * q.b - this.c * q.c - this.d * q.d,\n      this.a * q.b + this.b * q.a + this.c * q.d - this.d * q.c,\n      this.a * q.c - this.b * q.d + this.c * q.a + this.d * q.b,\n      this.a * q.d + this.b * q.c - this.c * q.b + this.d * q.a,\n    );\n  }\n\n  public toString(): string {\n    return `Q[${this.a},${this.b},${this.c},${this.d}]`;\n  }\n\n  public dist(q: Quat): number {\n    // Euclidean distance\n    return Math.hypot(this.a - q.a, this.b - q.b, this.c - q.c, this.d - q.d);\n  }\n\n  public len(): number {\n    // Euclidean length\n    return Math.hypot(this.a, this.b, this.c, this.d);\n  }\n\n  public cross(q: Quat): Quat {\n    // cross product\n    return new Quat(\n      0,\n      this.c * q.d - this.d * q.c,\n      this.d * q.b - this.b * q.d,\n      this.b * q.c - this.c * q.b,\n    );\n  }\n\n  public dot(q: Quat): number {\n    // dot product of two quaternions\n    return this.b * q.b + this.c * q.c + this.d * q.d;\n  }\n\n  public normalize(): Quat {\n    // make the magnitude be 1\n    const d = Math.sqrt(this.dot(this));\n    return new Quat(this.a / d, this.b / d, this.c / d, this.d / d);\n  }\n\n  public makenormal(): Quat {\n    // make a normal vector from a plane or quat or point\n    return new Quat(0, this.b, this.c, this.d).normalize();\n  }\n\n  public normalizeplane(): Quat {\n    // normalize a plane\n    const d = Math.hypot(this.b, this.c, this.d);\n    return new Quat(this.a / d, this.b / d, this.c / d, this.d / d);\n  }\n\n  public smul(m: number): Quat {\n    // scalar multiplication\n    return new Quat(this.a * m, this.b * m, this.c * m, this.d * m);\n  }\n\n  public sum(q: Quat): Quat {\n    // quaternion sum\n    return new Quat(this.a + q.a, this.b + q.b, this.c + q.c, this.d + q.d);\n  }\n\n  public sub(q: Quat): Quat {\n    // difference\n    return new Quat(this.a - q.a, this.b - q.b, this.c - q.c, this.d - q.d);\n  }\n\n  public angle(): number {\n    // quaternion angle\n    return 2 * Math.acos(this.a);\n  }\n\n  public invrot(): Quat {\n    // quaternion inverse rotation\n    return new Quat(this.a, -this.b, -this.c, -this.d);\n  }\n\n  public det3x3(\n    a00: number,\n    a01: number,\n    a02: number,\n    a10: number,\n    a11: number,\n    a12: number,\n    a20: number,\n    a21: number,\n    a22: number,\n  ): number {\n    // 3x3 determinant\n    return (\n      a00 * (a11 * a22 - a12 * a21) +\n      a01 * (a12 * a20 - a10 * a22) +\n      a02 * (a10 * a21 - a11 * a20)\n    );\n  }\n\n  public rotateplane(q: Quat): Quat {\n    // rotate a plane using a quaternion\n    const t = q.mul(new Quat(0, this.b, this.c, this.d)).mul(q.invrot());\n    t.a = this.a;\n    return t;\n  }\n\n  // return any vector orthogonal to the given one.  Find the smallest\n  // component (in absolute value) and return the cross product of that\n  // axis with the given vector.\n  public orthogonal(): Quat {\n    const ab = Math.abs(this.b);\n    const ac = Math.abs(this.c);\n    const ad = Math.abs(this.d);\n    if (ab < ac && ab < ad) {\n      return this.cross(new Quat(0, 1, 0, 0)).normalize();\n    } else if (ac < ab && ac < ad) {\n      return this.cross(new Quat(0, 0, 1, 0)).normalize();\n    } else {\n      return this.cross(new Quat(0, 0, 0, 1)).normalize();\n    }\n  }\n\n  // return the Quaternion that will rotate the this vector\n  // to the b vector through rotatepoint.\n  public pointrotation(b: Quat): Quat {\n    const a = this.normalize();\n    b = b.normalize();\n    if (a.sub(b).len() < eps) {\n      return new Quat(1, 0, 0, 0);\n    }\n    let h = a.sum(b);\n    if (h.len() < eps) {\n      h = h.orthogonal();\n    } else {\n      h = h.normalize();\n    }\n    const r = a.cross(h);\n    r.a = a.dot(h);\n    return r;\n  }\n\n  // given two vectors, return the portion of the first that\n  // is not in the direction of the second.\n  public unproject(b: Quat): Quat {\n    return this.sum(b.smul(-this.dot(b) / (this.len() * b.len())));\n  }\n\n  public rotatepoint(q: Quat): Quat {\n    // rotate a point\n    return q.mul(this).mul(q.invrot());\n  }\n\n  public rotateface(face: Quat[]): Quat[] {\n    // rotate a face by this Q.\n    return face.map((_: Quat) => _.rotatepoint(this));\n  }\n\n  public intersect3(p2: Quat, p3: Quat): Quat | false {\n    // intersect three planes if there is one\n    const det = this.det3x3(\n      this.b,\n      this.c,\n      this.d,\n      p2.b,\n      p2.c,\n      p2.d,\n      p3.b,\n      p3.c,\n      p3.d,\n    );\n    if (Math.abs(det) < eps) {\n      return false; // TODO: Change to `null` or `undefined`?\n    }\n    return new Quat(\n      0,\n      this.det3x3(this.a, this.c, this.d, p2.a, p2.c, p2.d, p3.a, p3.c, p3.d) /\n        det,\n      this.det3x3(this.b, this.a, this.d, p2.b, p2.a, p2.d, p3.b, p3.a, p3.d) /\n        det,\n      this.det3x3(this.b, this.c, this.a, p2.b, p2.c, p2.a, p3.b, p3.c, p3.a) /\n        det,\n    );\n  }\n\n  public side(x: number): number {\n    // is this point close to the origin, or on one or the other side?\n    if (x > eps) {\n      return 1;\n    }\n    if (x < -eps) {\n      return -1;\n    }\n    return 0;\n  }\n\n  /**\n   * Cuts a face by this plane, or returns null if there\n   * is no intersection.\n   * @param face The face to cut.\n   */\n  public cutface(face: Quat[]): Quat[][] | null {\n    const d = this.a;\n    let seen = 0;\n    let r = null;\n    for (let i = 0; i < face.length; i++) {\n      seen |= 1 << (this.side(face[i].dot(this) - d) + 1);\n    }\n    if ((seen & 5) === 5) {\n      r = [];\n      // saw both sides\n      const inout = face.map((_: Quat) => this.side(_.dot(this) - d));\n      for (let s = -1; s <= 1; s += 2) {\n        const nface = [];\n        for (let k = 0; k < face.length; k++) {\n          if (inout[k] === s || inout[k] === 0) {\n            nface.push(face[k]);\n          }\n          const kk = (k + 1) % face.length;\n          if (inout[k] + inout[kk] === 0 && inout[k] !== 0) {\n            const vk = face[k].dot(this) - d;\n            const vkk = face[kk].dot(this) - d;\n            const r = vk / (vk - vkk);\n            const pt = face[k].smul(1 - r).sum(face[kk].smul(r));\n            nface.push(pt);\n          }\n        }\n        r.push(nface);\n      }\n    }\n    return r;\n  }\n\n  public cutfaces(faces: Quat[][]): Quat[][] {\n    // Cut a set of faces by a plane and return new set\n    const nfaces = [];\n    for (let j = 0; j < faces.length; j++) {\n      const face = faces[j];\n      const t = this.cutface(face);\n      if (t) {\n        nfaces.push(t[0]);\n        nfaces.push(t[1]);\n      } else {\n        nfaces.push(face);\n      }\n    }\n    return nfaces;\n  }\n\n  public faceside(face: Quat[]): number {\n    // which side of a plane is a face on?\n    const d = this.a;\n    for (let i = 0; i < face.length; i++) {\n      const s = this.side(face[i].dot(this) - d);\n      if (s !== 0) {\n        return s;\n      }\n    }\n    throw new Error(\"Could not determine side of plane in faceside\");\n  }\n\n  public sameplane(p: Quat): boolean {\n    // are two planes the same?\n    const a = this.normalize();\n    const b = p.normalize();\n    return a.dist(b) < eps || a.dist(b.smul(-1)) < eps;\n  }\n\n  public makecut(r: number): Quat {\n    // make a cut from a normal vector\n    return new Quat(r, this.b, this.c, this.d);\n  }\n}\n", "/* tslint:disable prefer-for-of */ // TODO\n\nimport { Quat, solvethreeplanes } from \"./Quat\";\n\n// Next we define a class that yields quaternion generators for each of\n// the five platonic solids.  The quaternion generators chosen are\n// chosen specifically so that the first quaternion doubles as a plane\n// description that yields the given Platonic solid (so for instance, the\n// cubical group and octahedral group are identical in math, but we\n// give distinct representations choosing the first quaternion so that\n// we get the desired figure.)  Our convention is one vertex of the\n// shape points precisely down.\n\n// This class is static.\n\nconst eps = 1e-9; // TODO: Deduplicate with `PuzzleGeometry`?\n\nexport function cube(): Quat[] {\n  const s5 = Math.sqrt(0.5);\n  return [new Quat(s5, s5, 0, 0), new Quat(s5, 0, s5, 0)];\n}\n\nexport function tetrahedron(): Quat[] {\n  return [new Quat(0.5, 0.5, 0.5, 0.5), new Quat(0.5, 0.5, 0.5, -0.5)];\n}\n\nexport function dodecahedron(): Quat[] {\n  const d36 = (2 * Math.PI) / 10;\n  let dx = 0.5 + 0.3 * Math.sqrt(5);\n  let dy = 0.5 + 0.1 * Math.sqrt(5);\n  const dd = Math.sqrt(dx * dx + dy * dy);\n  dx /= dd;\n  dy /= dd;\n  return [\n    new Quat(Math.cos(d36), dx * Math.sin(d36), dy * Math.sin(d36), 0),\n    new Quat(0.5, 0.5, 0.5, 0.5),\n  ];\n}\n\nexport function icosahedron(): Quat[] {\n  let dx = 1 / 6 + Math.sqrt(5) / 6;\n  let dy = 2 / 3 + Math.sqrt(5) / 3;\n  const dd = Math.sqrt(dx * dx + dy * dy);\n  dx /= dd;\n  dy /= dd;\n  const ang = (2 * Math.PI) / 6;\n  return [\n    new Quat(Math.cos(ang), dx * Math.sin(ang), dy * Math.sin(ang), 0),\n    new Quat(Math.cos(ang), -dx * Math.sin(ang), dy * Math.sin(ang), 0),\n  ];\n}\n\nexport function octahedron(): Quat[] {\n  const s5 = Math.sqrt(0.5);\n  return [new Quat(0.5, 0.5, 0.5, 0.5), new Quat(s5, 0, 0, s5)];\n}\n\nexport function closure(g: Quat[]): Quat[] {\n  // compute the closure of a set of generators\n  // This is quadratic in the result size.  Also, it has no protection\n  // against you providing a bogus set of generators that would generate\n  // an infinite group.\n  const q = [new Quat(1, 0, 0, 0)];\n  for (let i = 0; i < q.length; i++) {\n    for (let j = 0; j < g.length; j++) {\n      const ns = g[j].mul(q[i]);\n      const negns = ns.smul(-1);\n      let wasseen = false;\n      for (let k = 0; k < q.length; k++) {\n        if (ns.dist(q[k]) < eps || negns.dist(q[k]) < eps) {\n          wasseen = true;\n          break;\n        }\n      }\n      if (!wasseen) {\n        q.push(ns);\n      }\n    }\n  }\n  return q;\n}\n\nexport function uniqueplanes(p: Quat, g: Quat[]): Quat[] {\n  // compute unique plane rotations\n  // given a rotation group and a plane, find the rotations that\n  // generate unique planes.  This is quadratic in the return size.\n  const planes = [];\n  const planerot = [];\n  for (let i = 0; i < g.length; i++) {\n    const p2 = p.rotateplane(g[i]);\n    let wasseen = false;\n    for (let j = 0; j < planes.length; j++) {\n      if (p2.dist(planes[j]) < eps) {\n        wasseen = true;\n        break;\n      }\n    }\n    if (!wasseen) {\n      planes.push(p2);\n      planerot.push(g[i]);\n    }\n  }\n  return planerot;\n}\n\nexport function getface(planes: Quat[]): Quat[] {\n  // compute a face given a set of planes\n  // The face returned will be a set of points that lie in the first plane\n  // in the given array, that are on the surface of the polytope defined\n  // by all the planes, and will be returned in clockwise order.\n  // This is O(planes^2 * return size + return_size^2).\n  const face: Quat[] = [];\n  for (let i = 1; i < planes.length; i++) {\n    for (let j = i + 1; j < planes.length; j++) {\n      const p = solvethreeplanes(0, i, j, planes);\n      if (p) {\n        let wasseen = false;\n        for (let k = 0; k < face.length; k++) {\n          if (p.dist(face[k]) < eps) {\n            wasseen = true;\n            break;\n          }\n        }\n        if (!wasseen) {\n          face.push(p);\n        }\n      }\n    }\n  }\n  for (;;) {\n    let changed = false;\n    for (let i = 0; i < face.length; i++) {\n      const j: number = (i + 1) % face.length;\n      if (planes[0].dot(face[i].cross(face[j])) < 0) {\n        const t: Quat = face[i];\n        face[i] = face[j];\n        face[j] = t;\n        changed = true;\n      }\n    }\n    if (!changed) {\n      break;\n    }\n  }\n  return face;\n}\n", "import { identity, Perm } from \"./Perm\";\n\nclass FactoredNumber {\n  public mult: number[];\n  constructor() {\n    this.mult = [];\n  }\n\n  public multiply(n: number): void {\n    for (let f = 2; f * f <= n; f++) {\n      while (n % f === 0) {\n        if (undefined !== this.mult[f]) {\n          this.mult[f]++;\n        } else {\n          this.mult[f] = 1;\n        }\n        n /= f;\n      }\n    }\n    if (n > 1) {\n      if (undefined !== this.mult[n]) {\n        this.mult[n]++;\n      } else {\n        this.mult[n] = 1;\n      }\n    }\n  }\n\n  public toString(): string {\n    let r = \"\";\n    for (let i = 0; i < this.mult.length; i++) {\n      if (undefined !== this.mult[i]) {\n        if (r !== \"\") {\n          r += \"*\";\n        }\n        r += i;\n        if (this.mult[i] > 1) {\n          r += `^${this.mult[i]}`;\n        }\n      }\n    }\n    return r;\n  }\n}\n\nexport function schreierSims(g: Perm[], disp: (s: string) => void): bigint {\n  const n = g[0].p.length;\n  const e = identity(n);\n  let sgs: Perm[][] = [];\n  let sgsi: Perm[][] = [];\n  let sgslen: number[][] = [];\n  let Tk: Perm[][] = [];\n  let Tklen: number[][] = [];\n  function resolve(p: Perm): boolean {\n    for (let i = p.p.length - 1; i >= 0; i--) {\n      const j = p.p[i];\n      if (j !== i) {\n        if (!sgs[i][j]) {\n          return false;\n        }\n        p = p.mul(sgsi[i][j]);\n      }\n    }\n    return true;\n  }\n  function knutha(k: number, p: Perm, len: number): void {\n    Tk[k].push(p);\n    Tklen[k].push(len);\n    for (let i = 0; i < sgs[k].length; i++) {\n      if (sgs[k][i]) {\n        knuthb(k, sgs[k][i].mul(p), len + sgslen[k][i]);\n      }\n    }\n  }\n  function knuthb(k: number, p: Perm, len: number): void {\n    const j = p.p[k];\n    if (!sgs[k][j]) {\n      sgs[k][j] = p;\n      sgsi[k][j] = p.inv();\n      sgslen[k][j] = len;\n      for (let i = 0; i < Tk[k].length; i++) {\n        knuthb(k, p.mul(Tk[k][i]), len + Tklen[k][i]);\n      }\n      return;\n    }\n    const p2 = p.mul(sgsi[k][j]);\n    if (!resolve(p2)) {\n      knutha(k - 1, p2, len + sgslen[k][j]);\n    }\n  }\n  function getsgs(): bigint {\n    sgs = [];\n    sgsi = [];\n    Tk = [];\n    sgslen = [];\n    Tklen = [];\n    for (let i = 0; i < n; i++) {\n      sgs.push([]);\n      sgsi.push([]);\n      sgslen.push([]);\n      Tk.push([]);\n      Tklen.push([]);\n      sgs[i][i] = e;\n      sgsi[i][i] = e;\n      sgslen[i][i] = 0;\n    }\n    let none = 0;\n    let sz = 1n;\n    for (let i = 0; i < g.length; i++) {\n      knutha(n - 1, g[i], 1);\n      sz = 1n;\n      let tks = 0;\n      let sollen = 0;\n      const avgs = [];\n      const mults = new FactoredNumber();\n      for (let j = 0; j < n; j++) {\n        let cnt = 0;\n        let lensum = 0;\n        for (let k = 0; k < n; k++) {\n          if (sgs[j][k]) {\n            cnt++;\n            lensum += sgslen[j][k];\n            if (j !== k) {\n              none++;\n            }\n          }\n        }\n        tks += Tk[j].length;\n        sz *= BigInt(cnt);\n        if (cnt > 1) {\n          mults.multiply(cnt);\n        }\n        const avg = lensum / cnt;\n        avgs.push(avg);\n        sollen += avg;\n      }\n      disp(\n        `${i}: sz ${sz} T ${tks} sol ${sollen} none ${none} mults ${mults.toString()}`,\n      );\n    }\n    return sz;\n  }\n  return getsgs();\n}\n", "import { Move, QuantumMove } from \"../alg\";\nimport type { KPuzzleDefinition, KTransformationData } from \"../kpuzzle\";\nimport { FaceNameSwizzler } from \"./FaceNameSwizzler\";\nimport {\n  FaceRenamingMapper,\n  FTONotationMapper,\n  MegaminxScramblingNotationMapper,\n  NotationMapper,\n  NullMapper,\n  NxNxNCubeMapper,\n  PyraminxNotationMapper,\n  SkewbNotationMapper,\n  TetraminxNotationMapper,\n} from \"./notation-mapping\";\nimport {\n  BaseFaceCount,\n  FaceBasedOrientationDescription,\n  FaceBasedOrientationDescriptionLookup,\n  PuzzleGeometryFullOptions,\n  PuzzleGeometryOptions,\n} from \"./Options\";\nimport { iota, Perm, zeros } from \"./Perm\";\nimport {\n  externalName,\n  PGOrbit,\n  PGOrbitDef,\n  PGOrbitsDef,\n  PGTransform,\n  showcanon,\n  VisibleState,\n} from \"./PermOriSet\";\nimport { PGPuzzles, PuzzleDescriptionString, PuzzleName } from \"./PGPuzzles\";\nimport {\n  closure,\n  cube,\n  dodecahedron,\n  getface,\n  icosahedron,\n  octahedron,\n  tetrahedron,\n  uniqueplanes,\n} from \"./PlatonicGenerator\";\nimport { centermassface, Quat } from \"./Quat\";\nimport { schreierSims } from \"./SchreierSims\";\n\nexport interface TextureMapper {\n  getuv(fn: number, threed: number[]): number[];\n}\n\nexport interface StickerDatSticker {\n  coords: number[];\n  color: string;\n  orbit: string;\n  ord: number;\n  ori: number;\n  face: number;\n  isDup?: boolean;\n}\n\nexport interface StickerDatFace {\n  coords: number[];\n  name: string;\n}\n\nexport type StickerDatAxis = {\n  coordinates: number[];\n  quantumMove: Move;\n  order: number;\n};\n\nexport interface StickerDat {\n  stickers: StickerDatSticker[];\n  faces: StickerDatFace[];\n  axis: StickerDatAxis[];\n  unswizzle(mv: Move): Move | null;\n  notationMapper: NotationMapper;\n  textureMapper: TextureMapper;\n}\n\n// you can fill these in to help with timing if you want\nfunction tstart(s: string): string {\n  return s;\n}\n\nfunction tend(_: string): void {}\n\nclass Face {\n  private coords: number[];\n  public length: number;\n  constructor(q: Quat[]) {\n    this.coords = new Array(q.length * 3);\n    for (let i = 0; i < q.length; i++) {\n      this.coords[3 * i] = q[i].b;\n      this.coords[3 * i + 1] = q[i].c;\n      this.coords[3 * i + 2] = q[i].d;\n    }\n    this.length = q.length;\n  }\n\n  get(off: number): Quat {\n    return new Quat(\n      0,\n      this.coords[3 * off],\n      this.coords[3 * off + 1],\n      this.coords[3 * off + 2],\n    );\n  }\n\n  centermass(): Quat {\n    let sx = 0;\n    let sy = 0;\n    let sz = 0;\n    for (let i = 0; i < this.length; i++) {\n      sx += this.coords[3 * i];\n      sy += this.coords[3 * i + 1];\n      sz += this.coords[3 * i + 2];\n    }\n    return new Quat(0, sx / this.length, sy / this.length, sz / this.length);\n  }\n\n  rotate(q: Quat): Face {\n    const a = [];\n    for (let i = 0; i < this.length; i++) {\n      a.push(this.get(i).rotatepoint(q));\n    }\n    return new Face(a);\n  }\n\n  rotateforward(): Face {\n    const a = [];\n    for (let i = 1; i < this.length; i++) {\n      a.push(this.get(i));\n    }\n    a.push(this.get(0));\n    return new Face(a);\n  }\n}\n\nexport class FaceTree {\n  constructor(\n    private face: Quat[],\n    private left?: FaceTree,\n    private right?: FaceTree,\n  ) {}\n\n  public split(q: Quat): FaceTree {\n    const t = q.cutface(this.face);\n    if (t !== null) {\n      if (this.left === undefined) {\n        this.left = new FaceTree(t[0]);\n        this.right = new FaceTree(t[1]);\n      } else {\n        this.left = this.left?.split(q);\n        this.right = this.right?.split(q);\n      }\n    }\n    return this;\n  }\n\n  public collect(arr: Face[], leftfirst: boolean): Face[] {\n    if (this.left === undefined) {\n      arr.push(new Face(this.face));\n    } else if (leftfirst) {\n      this.left?.collect(arr, false);\n      this.right?.collect(arr, true);\n    } else {\n      this.right?.collect(arr, false);\n      this.left?.collect(arr, true);\n    }\n    return arr;\n  }\n}\n\nexport function expandfaces(rots: Quat[], faces: Face[]): Face[] {\n  // given a set of faces, expand by rotation set\n  const nfaces = [];\n  for (const rot of rots) {\n    for (const face of faces) {\n      nfaces.push(face.rotate(rot));\n    }\n  }\n  return nfaces;\n}\n\n//  Now we have a geometry class that does the 3D goemetry to calculate\n//  individual sticker information from a Platonic solid and a set of\n//  cuts.  The cuts must have the same symmetry as the Platonic solid;\n//  we even restrict them further to be either vertex-normal,\n//  edge-normal, or face-parallel cuts.  Right now our constructor takes\n//  a character solid indicator (one of c(ube), o(ctahedron), i(cosahedron),\n//  t(etradron), or d(odecahedron), followed by an array of cuts.\n//  Each cut is a character normal indicator that is either f(ace),\n//  e(dge), or v(ertex), followed by a floating point value that gives\n//  the depth of the cut where 0 is the center and 1 is the outside\n//  border of the shape in that direction.\n\n//  This is a heavyweight class with lots of members and construction\n//  is slow.  Be gentle.\n\n//  Everything except a very few methods should be considered private.\n\nconst eps: number = 1e-9;\nconst copyright = \"PuzzleGeometry 0.1 Copyright 2018 Tomas Rokicki.\";\nconst permissivieMoveParsing = false;\n\n// This is a description of the nets and the external names we give each\n// face.  The names should be a set of prefix-free upper-case alphabetics\n// so\n// we can easily also name and distinguish vertices and edges, but we\n// may change this in the future.  The nets consist of a list of lists.\n// Each list gives the name of a face, and then the names of the\n// faces connected to that face (in the net) in clockwise order.\n// The length of each list should be one more than the number of\n// edges in the regular polygon for that face.  All polygons must\n// have the same number of edges.\n// The first two faces in the first list must describe a horizontal edge\n// that is at the bottom of a regular polygon.  The first two faces in\n// every subsequent list for a given polytope must describe a edge that\n// is directly connected in the net and has already been described (this\n// sets the location and orientation of the polygon for that face.\n// Any edge that is not directly connected in the net should be given\n// the empty string as the other face.  All faces do not need to have\n// a list starting with that face; just enough to describe the full\n// connectivity of the net.\n//\n// TODO: change this back to a const JSON definition.\nfunction defaultnets(): any {\n  return {\n    // four faces: tetrahedron\n    4: [[\"F\", \"D\", \"L\", \"R\"]],\n    // six faces: cube\n    6: [\n      [\"F\", \"D\", \"L\", \"U\", \"R\"],\n      [\"R\", \"F\", \"\", \"B\", \"\"],\n    ],\n    // eight faces: octahedron\n    8: [\n      [\"F\", \"D\", \"L\", \"R\"],\n      [\"D\", \"F\", \"BR\", \"\"],\n      [\"BR\", \"D\", \"\", \"BB\"],\n      [\"BB\", \"BR\", \"U\", \"BL\"],\n    ],\n    // twelve faces:  dodecahedron; U/F/R/F/BL/BR from megaminx\n    12: [\n      [\"U\", \"F\", \"\", \"\", \"\", \"\"],\n      [\"F\", \"U\", \"R\", \"C\", \"A\", \"L\"],\n      [\"R\", \"F\", \"\", \"\", \"E\", \"\"],\n      [\"E\", \"R\", \"\", \"BF\", \"\", \"\"],\n      [\"BF\", \"E\", \"BR\", \"BL\", \"I\", \"D\"],\n    ],\n    // twenty faces: icosahedron\n    20: [\n      [\"R\", \"C\", \"F\", \"E\"],\n      [\"F\", \"R\", \"L\", \"U\"],\n      [\"L\", \"F\", \"A\", \"\"],\n      [\"E\", \"R\", \"G\", \"I\"],\n      [\"I\", \"E\", \"S\", \"H\"],\n      [\"S\", \"I\", \"J\", \"B\"],\n      [\"B\", \"S\", \"K\", \"D\"],\n      [\"K\", \"B\", \"M\", \"O\"],\n      [\"O\", \"K\", \"P\", \"N\"],\n      [\"P\", \"O\", \"Q\", \"\"],\n    ],\n  };\n}\n\n// TODO: change this back to a const JSON definition.\nfunction defaultcolors(): any {\n  return {\n    // the colors should use the same naming convention as the nets, above.\n    4: { F: \"#00ff00\", D: \"#ffff00\", L: \"#ff0000\", R: \"#0000ff\" },\n    6: {\n      U: \"#ffffff\",\n      F: \"#00ff00\",\n      R: \"#ff0000\",\n      D: \"#ffff00\",\n      B: \"#0000ff\",\n      L: \"#ff8000\",\n    },\n    8: {\n      U: \"#ffffff\",\n      F: \"#ff0000\",\n      R: \"#00bb00\",\n      D: \"#ffff00\",\n      BB: \"#1122ff\",\n      L: \"#9524c5\",\n      BL: \"#ff8800\",\n      BR: \"#aaaaaa\",\n    },\n    12: {\n      U: \"#ffffff\",\n      F: \"#006633\",\n      R: \"#ff0000\",\n      C: \"#ffffd0\",\n      A: \"#3399ff\",\n      L: \"#660099\",\n      E: \"#ff66cc\",\n      BF: \"#99ff00\",\n      BR: \"#0000ff\",\n      BL: \"#ffff00\",\n      I: \"#ff6633\",\n      D: \"#999999\",\n    },\n    20: {\n      R: \"#db69f0\",\n      C: \"#178fde\",\n      F: \"#23238b\",\n      E: \"#9cc726\",\n      L: \"#2c212d\",\n      U: \"#177fa7\",\n      A: \"#e0de7f\",\n      G: \"#2b57c0\",\n      I: \"#41126b\",\n      S: \"#4b8c28\",\n      H: \"#7c098d\",\n      J: \"#7fe7b4\",\n      B: \"#85fb74\",\n      K: \"#3f4bc3\",\n      D: \"#0ff555\",\n      M: \"#f1c2c8\",\n      O: \"#58d340\",\n      P: \"#c514f2\",\n      N: \"#14494e\",\n      Q: \"#8b1be1\",\n    },\n  };\n}\n\n// Orientation conventions are specified here.  For each of the five platonic\n// solids, by face count, we have three lists of \"cubie names\" consisting of\n// a concatenation of face names.  For vertex (corner) and edge cubies, the\n// first face in the concatenated name is the one that will be marked.\n// For center orientations, the first face specifies which center we are\n// referring to, and the second face specifies the direction of the mark for\n// that face.\n\nconst orientationDefaults = {\n  4: {\n    v: [\"DFR\", \"DLF\", \"DRL\", \"FLR\"],\n    e: [\"FR\", \"LF\", \"DF\", \"DL\", \"RD\", \"RL\"],\n    c: [\"DF\", \"FD\", \"RL\", \"LR\"],\n  },\n  6: {\n    v: [\"URF\", \"UBR\", \"ULB\", \"UFL\", \"DFR\", \"DRB\", \"DBL\", \"DLF\"],\n    e: [\"UF\", \"UR\", \"UB\", \"UL\", \"DF\", \"DR\", \"DB\", \"DL\", \"FR\", \"FL\", \"BR\", \"BL\"],\n    c: [\"UB\", \"LU\", \"FU\", \"RU\", \"BU\", \"DF\"],\n  },\n  8: {\n    v: [\"UBBBRR\", \"URFL\", \"ULBLBB\", \"DBRBBBL\", \"DBLLF\", \"DFRBR\"],\n    e: [\n      \"UL\",\n      \"UBB\",\n      \"UR\",\n      \"BRD\",\n      \"BLD\",\n      \"FD\",\n      \"BRR\",\n      \"FR\",\n      \"FL\",\n      \"BLL\",\n      \"BLBB\",\n      \"BRBB\",\n    ],\n    c: [\"BBU\", \"LU\", \"RU\", \"BRD\", \"FD\", \"BLD\", \"DF\", \"UBB\"],\n  },\n  12: {\n    v: [\n      \"URF\",\n      \"UFL\",\n      \"ULBL\",\n      \"UBLBR\",\n      \"UBRR\",\n      \"DEBF\",\n      \"DBFI\",\n      \"DIA\",\n      \"DAC\",\n      \"DCE\",\n      \"LAI\",\n      \"ALF\",\n      \"FCA\",\n      \"CFR\",\n      \"REC\",\n      \"ERBR\",\n      \"BRBFE\",\n      \"BFBRBL\",\n      \"BLIBF\",\n      \"IBLL\",\n    ],\n    e: [\n      \"UF\",\n      \"UR\",\n      \"UBR\",\n      \"UBL\",\n      \"UL\",\n      \"ER\",\n      \"EBR\",\n      \"EBF\",\n      \"ED\",\n      \"EC\",\n      \"IBF\",\n      \"IBL\",\n      \"IL\",\n      \"IA\",\n      \"ID\",\n      \"AC\",\n      \"CF\",\n      \"FA\",\n      \"BFBR\",\n      \"BRBL\",\n      \"BLBF\",\n      \"CD\",\n      \"AD\",\n      \"AL\",\n      \"FL\",\n      \"FR\",\n      \"CR\",\n      \"BFD\",\n      \"BRR\",\n      \"BLL\",\n    ],\n    c: [\n      \"UF\",\n      \"FU\",\n      \"DBF\",\n      \"BFD\",\n      \"AD\",\n      \"CD\",\n      \"BRU\",\n      \"BLU\",\n      \"LA\",\n      \"RA\",\n      \"EBR\",\n      \"IBL\",\n    ],\n  },\n  20: {\n    v: [\n      \"FLPQU\",\n      \"FUGER\",\n      \"FRCAL\",\n      \"HCREI\",\n      \"ISBDH\",\n      \"JSIEG\",\n      \"BSJMK\",\n      \"MQPOK\",\n      \"ONDBK\",\n      \"NOPLA\",\n      \"UQMJG\",\n      \"DNACH\",\n    ],\n    e: [\n      \"FU\",\n      \"FL\",\n      \"FR\",\n      \"EG\",\n      \"ER\",\n      \"EI\",\n      \"SJ\",\n      \"SI\",\n      \"SB\",\n      \"KM\",\n      \"KB\",\n      \"KO\",\n      \"PQ\",\n      \"PO\",\n      \"PL\",\n      \"UG\",\n      \"JG\",\n      \"MQ\",\n      \"UQ\",\n      \"HC\",\n      \"HD\",\n      \"ND\",\n      \"NA\",\n      \"JM\",\n      \"CA\",\n      \"AL\",\n      \"CR\",\n      \"HI\",\n      \"DB\",\n      \"NO\",\n    ],\n    c: [\n      \"FU\",\n      \"UF\",\n      \"GE\",\n      \"EG\",\n      \"JS\",\n      \"SJ\",\n      \"MK\",\n      \"KM\",\n      \"QP\",\n      \"PQ\",\n      \"LA\",\n      \"AL\",\n      \"RC\",\n      \"CR\",\n      \"IH\",\n      \"HI\",\n      \"BD\",\n      \"DB\",\n      \"ON\",\n      \"NO\",\n    ],\n  },\n};\n\n/*\n *  Default orientations for the puzzles in 3D space.  Can be overridden\n *  by puzzleOrientation or puzzleOrientations options.\n *\n *  These are defined to have a strong intuitive vertical (y) direction\n *  since 3D orbital controls need this.  In comments, we list the\n *  preferred initial camera orientation for each puzzle for twizzle;\n *  this information is explicitly given in the twizzle app file.\n */\n// TODO: change this back to a const JSON definition.\nfunction defaultOrientations(): FaceBasedOrientationDescriptionLookup {\n  return {\n    4: [\n      [\"FLR\", [0, 1, 0]],\n      [\"F\", [0, 0, 1]],\n    ], // FLR towards viewer\n    6: [\n      [\"U\", [0, 1, 0]],\n      [\"F\", [0, 0, 1]],\n    ], // URF towards viewer\n    8: [\n      [\"U\", [0, 1, 0]],\n      [\"F\", [0, 0, 1]],\n    ], // FLUR towards viewer\n    12: [\n      [\"U\", [0, 1, 0]],\n      [\"F\", [0, 0, 1]],\n    ], // F towards viewer\n    20: [\n      [\"GUQMJ\", [0, 1, 0]],\n      [\"F\", [0, 0, 1]],\n    ], // F towards viewer\n  };\n}\n\nfunction findelement(a: Quat[][], p: Quat): number {\n  // find something in facenames, vertexnames, edgenames\n  for (let i = 0; i < a.length; i++) {\n    if (a[i][0].dist(p) < eps) {\n      return i;\n    }\n  }\n  throw new Error(\"Element not found\");\n}\n\nexport function getPG3DNamedPuzzles(): {\n  [s: string]: PuzzleDescriptionString;\n} {\n  // get some simple definitions of basic puzzles\n  return PGPuzzles;\n}\n\nexport function getPuzzleDescriptionString(\n  puzzleName: PuzzleName,\n): PuzzleDescriptionString {\n  // get some simple definitions of basic puzzles\n  return PGPuzzles[puzzleName];\n}\n\nexport const PUZZLE_BASE_SHAPES = [\"c\", \"t\", \"o\", \"d\", \"i\"] as const;\nexport type PuzzleBaseShape = typeof PUZZLE_BASE_SHAPES[number];\n\nexport const PUZZLE_CUT_TYPES = [\"f\", \"v\", \"e\"] as const;\nexport type PuzzleCutType = typeof PUZZLE_CUT_TYPES[number];\n\nexport type PuzzleCutDescription = { cutType: PuzzleCutType; distance: number };\nexport type PuzzleDescription = {\n  shape: PuzzleBaseShape;\n  cuts: PuzzleCutDescription[];\n};\n\nexport function parsePuzzleDescription(\n  s: PuzzleDescriptionString,\n): PuzzleDescription | null {\n  // parse a text description\n  const a = s.split(/ /).filter(Boolean);\n  if (a.length % 2 === 0) {\n    return null;\n  }\n  const shape = a[0];\n  if (\n    shape !== \"o\" &&\n    shape !== \"c\" &&\n    shape !== \"i\" &&\n    shape !== \"d\" &&\n    shape !== \"t\"\n  ) {\n    return null;\n  }\n  const cuts: PuzzleCutDescription[] = [];\n  for (let i = 1; i < a.length; i += 2) {\n    if (a[i] !== \"f\" && a[i] !== \"v\" && a[i] !== \"e\") {\n      return null;\n    }\n    cuts.push({\n      cutType: a[i] as PuzzleCutType,\n      distance: parseFloat(a[i + 1]),\n    });\n  }\n  return { shape, cuts };\n}\n\nexport function getPuzzleGeometryByDesc(\n  desc: string,\n  options: PuzzleGeometryOptions = {},\n): PuzzleGeometry {\n  const parsed = parsePuzzleDescription(desc);\n  if (parsed === null) {\n    throw new Error(\"Could not parse the puzzle description\");\n  }\n  const pg = new PuzzleGeometry(\n    parsed,\n    Object.assign({}, { allMoves: true } as PuzzleGeometryOptions, options),\n  );\n  pg.allstickers();\n  pg.genperms();\n  return pg;\n}\n\nexport function getPuzzleGeometryByName(\n  puzzleName: PuzzleName,\n  options?: PuzzleGeometryOptions,\n): PuzzleGeometry {\n  return getPuzzleGeometryByDesc(PGPuzzles[puzzleName], options);\n}\n\nfunction getmovename(\n  geo: any,\n  bits: number[],\n  slices: number,\n): [string, boolean] {\n  // generate a move name based on bits, slice, and geo\n  // if the move name is from the opposite face, say so.\n  // find the face that's turned.\n  let inverted = false;\n  if (slices - bits[1] < bits[0]) {\n    // flip if most of the move is on the other side\n    geo = [geo[2], geo[3], geo[0], geo[1]];\n    bits = [slices - bits[1], slices - bits[0]];\n    inverted = true;\n  }\n  let movenameFamily = geo[0] as string;\n  let movenamePrefix = \"\";\n  if (bits[0] === 0 && bits[1] === slices) {\n    movenameFamily = movenameFamily + \"v\";\n  } else if (bits[0] === bits[1]) {\n    if (bits[1] > 0) {\n      movenamePrefix = String(bits[1] + 1);\n    }\n  } else if (bits[0] === 0) {\n    movenameFamily = movenameFamily.toLowerCase();\n    if (bits[1] > 1) {\n      movenamePrefix = String(bits[1] + 1);\n    }\n  } else {\n    throw new Error(\n      `We only support slice and outer block moves right now. ${bits}`,\n    );\n  }\n  return [movenamePrefix + movenameFamily, inverted];\n}\n\n// split a geometrical element into face names.  Do greedy match.\n// Permit underscores between names.\nfunction splitByFaceNames(s: string, facenames: [Quat[], string][]): string[] {\n  const r: string[] = [];\n  let at = 0;\n  while (at < s.length) {\n    if (at > 0 && at < s.length && s[at] === \"_\") {\n      at++;\n    }\n    let currentMatch = \"\";\n    for (const facename of facenames) {\n      if (\n        s.substr(at).startsWith(facename[1]) &&\n        facename[1].length > currentMatch.length\n      ) {\n        currentMatch = facename[1];\n      }\n    }\n    if (currentMatch !== \"\") {\n      r.push(currentMatch);\n      at += currentMatch.length;\n    } else {\n      throw new Error(\"Could not split \" + s + \" into face names.\");\n    }\n  }\n  return r;\n}\n\nfunction toCoords(q: Quat, maxdist: number): number[] {\n  return [q.b / maxdist, -q.c / maxdist, q.d / maxdist];\n}\n\nfunction toFaceCoords(q: Face, maxdist: number): number[] {\n  const r = [];\n  const n = q.length;\n  for (let i = 0; i < n; i++) {\n    const pt = toCoords(q.get(n - i - 1), maxdist);\n    r[3 * i] = pt[0];\n    r[3 * i + 1] = pt[1];\n    r[3 * i + 2] = pt[2];\n  }\n  return r;\n}\n\n/** @category PuzzleGeometry */\nexport class PuzzleGeometry {\n  private rotations: Quat[]; // all members of the rotation group\n  public baseplanerot: Quat[]; // unique rotations of the baseplane\n  private baseplanes: Quat[]; // planes, corresponding to faces\n  private facenames: [Quat[], string][]; // face names\n  private faceplanes: [Quat, string][]; // face planes\n  private edgenames: [Quat, string][]; // edge names\n  private vertexnames: [Quat, string][]; // vertexnames\n  private geonormals: [Quat, string, string][]; // all geometric directions, with names and types\n  private moveplanes: Quat[]; // the planes that split moves\n  private moveplanes2: Quat[]; // the planes that split moves, filtered\n  public moveplanesets: Quat[][]; // the move planes, in parallel sets\n  private moveplanenormals: Quat[]; // one move plane\n  public movesetorders: number[]; // the order of rotations for each move set\n  public movesetgeos: [string, string, string, string, number][]; // geometric feature information for move sets\n  private basefaces: Face[]; // polytope faces before cuts\n  private faces: Face[]; // all the stickers\n  private facecentermass: Quat[]; // center of mass of all faces\n  private baseFaceCount: BaseFaceCount; // number of base faces\n  public stickersperface: number; // number of stickers per face\n  public shortedge: number; // number of stickers per face\n  private markedface: number[]; // given a bitmap of faces, identify the marked one\n  public cubies: number[][]; // the cubies\n  private vertexdistance: number; // vertex distance\n  private edgedistance: number; // edge distance\n  private facetocubie: number[]; // map a face to a cubie index\n  private facetoord: number[]; // map a face to a cubie ord\n  private moverotations: Quat[][]; // move rotations\n  private facelisthash: Map<string, number[]>; // face list by key\n  private cubiesetnames: string[]; // cubie set names\n  private cubieords: number[]; // the size of each orbit\n  private cubiesetnums: number[];\n  private cubieordnums: number[];\n  private orbitoris: number[]; // the orientation size of each orbit\n  private cubievaluemap: number[]; // the map for identical cubies\n  private cubiesetcubies: number[][]; // cubies in each cubie set\n  public cmovesbyslice: number[][][] = []; // cmoves as perms by slice\n  public parsedmovelist: [\n    string | undefined,\n    number,\n    number,\n    number,\n    boolean,\n    number,\n  ][]; // parsed move list\n\n  private duplicatedFaces: number[] = []; // which faces are duplicated\n  private duplicatedCubies: number[] = []; // which cubies are duplicated\n  private fixedCubie: number = -1; // fixed cubie, if any\n  private net: string[][] = [];\n  private colors: any = [];\n  private swizzler: FaceNameSwizzler;\n  public notationMapper: NotationMapper = new NullMapper();\n  private addNotationMapper: string = \"\";\n  private setReidOrder: boolean = false;\n\n  private options: PuzzleGeometryFullOptions;\n\n  constructor(\n    public puzzleDescription: PuzzleDescription,\n    options: PuzzleGeometryOptions,\n  ) {\n    const t1 = tstart(\"genperms\");\n    this.options = new PuzzleGeometryFullOptions(options);\n    if (this.options.verbosity > 0) {\n      console.log(this.header(\"# \"));\n    }\n    this.create(puzzleDescription);\n    tend(t1);\n  }\n\n  public create(puzzleDescription: PuzzleDescription): void {\n    const { shape, cuts } = puzzleDescription;\n\n    // create the shape, doing all the essential geometry\n    // create only goes far enough to figure out how many stickers per\n    // face, and what the short edge is.  If the short edge is too short,\n    // we probably don't want to display or manipulate this one.  How\n    // short is too short is hard to say.\n    this.moveplanes = [];\n    this.moveplanes2 = [];\n    this.faces = [];\n    this.cubies = [];\n    let g = null;\n    switch (shape) {\n      case \"c\":\n        g = cube();\n        break;\n      case \"o\":\n        g = octahedron();\n        break;\n      case \"i\":\n        g = icosahedron();\n        break;\n      case \"t\":\n        g = tetrahedron();\n        break;\n      case \"d\":\n        g = dodecahedron();\n        break;\n      default:\n        throw new Error(\"Bad shape argument: \" + shape);\n    }\n    this.rotations = closure(g);\n    if (this.options.verbosity) {\n      console.log(\"# Rotations: \" + this.rotations.length);\n    }\n    const baseplane = g[0];\n    this.baseplanerot = uniqueplanes(baseplane, this.rotations);\n    const baseplanes = this.baseplanerot.map((_) => baseplane.rotateplane(_));\n    this.baseplanes = baseplanes;\n    this.baseFaceCount = baseplanes.length as BaseFaceCount;\n    const net = defaultnets()[baseplanes.length];\n    this.net = net;\n    this.colors = defaultcolors()[baseplanes.length];\n    if (this.options.verbosity > 0) {\n      console.log(\"# Base planes: \" + baseplanes.length);\n    }\n    const baseface = getface(baseplanes);\n    const zero = new Quat(0, 0, 0, 0);\n    if (this.options.verbosity > 0) {\n      console.log(\"# Face vertices: \" + baseface.length);\n    }\n    const facenormal = baseplanes[0].makenormal();\n    const edgenormal = baseface[0].sum(baseface[1]).makenormal();\n    const vertexnormal = baseface[0].makenormal();\n    const boundary = new Quat(1, facenormal.b, facenormal.c, facenormal.d);\n    if (this.options.verbosity > 0) {\n      console.log(\"# Boundary is \" + boundary);\n    }\n    const planerot = uniqueplanes(boundary, this.rotations);\n    const planes = planerot.map((_) => boundary.rotateplane(_));\n    const firstface = getface(planes);\n    this.edgedistance = firstface[0].sum(firstface[1]).smul(0.5).dist(zero);\n    this.vertexdistance = firstface[0].dist(zero);\n    const cutplanes = [];\n    const intersects = [];\n    let sawface = false; // what cuts did we see?\n    let sawedge = false;\n    let sawvertex = false;\n    for (const cut of cuts) {\n      let normal = null;\n      let distance = 0;\n      switch (cut.cutType) {\n        case \"f\":\n          normal = facenormal;\n          distance = 1;\n          sawface = true;\n          break;\n        case \"v\":\n          normal = vertexnormal;\n          distance = this.vertexdistance;\n          sawvertex = true;\n          break;\n        case \"e\":\n          normal = edgenormal;\n          distance = this.edgedistance;\n          sawedge = true;\n          break;\n        default:\n          throw new Error(\"Bad cut argument: \" + cut.cutType);\n      }\n      cutplanes.push(normal.makecut(cut.distance));\n      intersects.push(cut.distance < distance);\n    }\n    if (this.options.addRotations) {\n      if (!sawface) {\n        cutplanes.push(facenormal.makecut(10));\n      }\n      if (!sawvertex) {\n        cutplanes.push(vertexnormal.makecut(10));\n      }\n      if (!sawedge) {\n        cutplanes.push(edgenormal.makecut(10));\n      }\n    }\n    this.basefaces = [];\n    for (const baseplanerot of this.baseplanerot) {\n      const face = baseplanerot.rotateface(firstface);\n      this.basefaces.push(new Face(face));\n    }\n    //\n    //   Determine names for edges, vertices, and planes.  Planes are defined\n    //   by the plane normal/distance; edges are defined by the midpoint;\n    //   vertices are defined by actual point.  In each case we define a name.\n    //   Note that edges have two potential names, and corners have n! where\n    //   n planes meet at a vertex.  We set names by choosing the marked face\n    //   first, and going counterclockwise around.\n    //\n    const facenames: [Quat[], string][] = [];\n    const faceplanes: [Quat, string][] = [];\n    const vertexnames: any[] = [];\n    const edgenames: any[] = [];\n    const edgesperface = firstface.length;\n    function searchaddelement(a: any[], p: Quat, name: any): void {\n      for (const el of a) {\n        if (el[0].dist(p) < eps) {\n          el.push(name);\n          return;\n        }\n      }\n      a.push([p, name]);\n    }\n    for (let i = 0; i < this.baseplanerot.length; i++) {\n      const face = this.baseplanerot[i].rotateface(firstface);\n      for (let j = 0; j < face.length; j++) {\n        const jj = (j + 1) % face.length;\n        const midpoint = face[j].sum(face[jj]).smul(0.5);\n        searchaddelement(edgenames, midpoint, i);\n      }\n    }\n    const otherfaces = [];\n    for (let i = 0; i < this.baseplanerot.length; i++) {\n      const face = this.baseplanerot[i].rotateface(firstface);\n      const facelist = [];\n      for (let j = 0; j < face.length; j++) {\n        const jj = (j + 1) % face.length;\n        const midpoint = face[j].sum(face[jj]).smul(0.5);\n        const el = edgenames[findelement(edgenames, midpoint)];\n        if (i === el[1]) {\n          facelist.push(el[2]);\n        } else if (i === el[2]) {\n          facelist.push(el[1]);\n        } else {\n          throw new Error(\"Could not find edge\");\n        }\n      }\n      otherfaces.push(facelist);\n    }\n    const facenametoindex: any = {};\n    const faceindextoname: string[] = [];\n    faceindextoname.push(net[0][0]);\n    facenametoindex[net[0][0]] = 0;\n    faceindextoname[otherfaces[0][0]] = net[0][1];\n    facenametoindex[net[0][1]] = otherfaces[0][0];\n    for (const neti of net) {\n      const f0 = neti[0];\n      const fi = facenametoindex[f0];\n      if (fi === undefined) {\n        throw new Error(\"Bad edge description; first edge not connected\");\n      }\n      let ii = -1;\n      for (let j = 0; j < otherfaces[fi].length; j++) {\n        const fn2 = faceindextoname[otherfaces[fi][j]];\n        if (fn2 !== undefined && fn2 === neti[1]) {\n          ii = j;\n          break;\n        }\n      }\n      if (ii < 0) {\n        throw new Error(\"First element of a net not known\");\n      }\n      for (let j = 2; j < neti.length; j++) {\n        if (neti[j] === \"\") {\n          continue;\n        }\n        const of = otherfaces[fi][(j + ii - 1) % edgesperface];\n        const fn2 = faceindextoname[of];\n        if (fn2 !== undefined && fn2 !== neti[j]) {\n          throw new Error(\"Face mismatch in net\");\n        }\n        faceindextoname[of] = neti[j];\n        facenametoindex[neti[j]] = of;\n      }\n    }\n    for (let i = 0; i < this.baseplanerot.length; i++) {\n      const face = this.baseplanerot[i].rotateface(firstface);\n      const faceplane = boundary.rotateplane(this.baseplanerot[i]);\n      const facename = faceindextoname[i];\n      facenames.push([face, facename]);\n      faceplanes.push([faceplane, facename]);\n    }\n    for (let i = 0; i < this.baseplanerot.length; i++) {\n      const face = this.baseplanerot[i].rotateface(firstface);\n      const facename = faceindextoname[i];\n      for (let j = 0; j < face.length; j++) {\n        const jj = (j + 1) % face.length;\n        const midpoint = face[j].sum(face[jj]).smul(0.5);\n        const jjj = (j + 2) % face.length;\n        const midpoint2 = face[jj].sum(face[jjj]).smul(0.5);\n        const e1 = findelement(edgenames, midpoint);\n        const e2 = findelement(edgenames, midpoint2);\n        searchaddelement(vertexnames, face[jj], [facename, e2, e1]);\n      }\n    }\n    this.swizzler = new FaceNameSwizzler(facenames.map((_) => _[1]));\n    const sep = this.swizzler.prefixFree ? \"\" : \"_\";\n    // fix the edge names; use face precedence order\n    const oridata = orientationDefaults[this.baseFaceCount];\n    const markedface = [];\n    for (let i = 0; i < this.baseFaceCount; i++) {\n      markedface[1 << i] = i;\n    }\n    // FIXME  eliminate the duplications below\n    {\n      const oriprefs = oridata[\"v\"];\n      for (const name of oriprefs) {\n        const fn = this.swizzler.splitByFaceNames(name);\n        let bits = 0;\n        for (const i of fn) {\n          bits |= 1 << i;\n        }\n        markedface[bits] = fn[0];\n      }\n    }\n    {\n      const oriprefs = oridata[\"e\"];\n      for (const name of oriprefs) {\n        const fn = this.swizzler.splitByFaceNames(name);\n        let bits = 0;\n        for (const i of fn) {\n          bits |= 1 << i;\n        }\n        markedface[bits] = fn[0];\n      }\n    }\n    {\n      const oriprefs = oridata[\"c\"];\n      for (const name of oriprefs) {\n        const fn = this.swizzler.splitByFaceNames(name);\n        const bits = (1 << fn[0]) | (1 << this.baseFaceCount);\n        markedface[bits] = fn[1];\n      }\n    }\n    for (let i = 0; i < edgenames.length; i++) {\n      if (edgenames[i].length !== 3) {\n        throw new Error(\"Bad length in edge names \" + edgenames[i]);\n      }\n      const f1 = edgenames[i][1];\n      const f2 = edgenames[i][2];\n      let c1 = faceindextoname[f1];\n      const c2 = faceindextoname[f2];\n      const bits = (1 << f1) | (1 << f2);\n      if (markedface[bits] == f1) {\n        c1 = c1 + sep + c2;\n      } else {\n        c1 = c2 + sep + c1;\n      }\n      edgenames[i] = [edgenames[i][0], c1];\n    }\n    // fix the vertex names; counterclockwise rotations; proper orientation.\n    for (let i = 0; i < vertexnames.length; i++) {\n      let bits = 0;\n      if (vertexnames[i].length < 4) {\n        throw new Error(\"Bad length in vertex names\");\n      }\n      for (let j = 1; j < vertexnames[i].length; j++) {\n        bits |= 1 << facenametoindex[vertexnames[i][j][0]];\n      }\n      const fi = markedface[bits];\n      let st = -1;\n      for (let j = 1; j < vertexnames[i].length; j++) {\n        if (fi === facenametoindex[vertexnames[i][j][0]]) {\n          st = j;\n        }\n      }\n      if (st < 0) {\n        throw new Error(\n          \"Internal error; couldn't find face name when fixing corners\",\n        );\n      }\n      let r = \"\";\n      for (let j = 1; j < vertexnames[i].length; j++) {\n        if (j === 1) {\n          r = vertexnames[i][st][0];\n        } else {\n          r = r + sep + vertexnames[i][st][0];\n        }\n        for (let k = 1; k < vertexnames[i].length; k++) {\n          if (vertexnames[i][st][1] === vertexnames[i][k][2]) {\n            st = k;\n            break;\n          }\n        }\n      }\n      vertexnames[i] = [vertexnames[i][0], r];\n    }\n    this.markedface = markedface;\n    if (this.options.verbosity > 1) {\n      console.log(\"# Face names: \" + facenames.map((_) => _[1]).join(\" \"));\n      // TODO\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      console.log(\"# Edge names: \" + edgenames.map((_) => _[1]).join(\" \"));\n      // TODO\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      console.log(\"# Vertex names: \" + vertexnames.map((_) => _[1]).join(\" \"));\n    }\n    const geonormals: [Quat, string, string][] = [];\n    for (const faceplane of faceplanes) {\n      geonormals.push([faceplane[0].makenormal(), faceplane[1], \"f\"]);\n    }\n    for (const edgename of edgenames) {\n      geonormals.push([edgename[0].makenormal(), edgename[1], \"e\"]);\n    }\n    for (const vertexname of vertexnames) {\n      geonormals.push([vertexname[0].makenormal(), vertexname[1], \"v\"]);\n    }\n    this.facenames = facenames;\n    this.faceplanes = faceplanes;\n    this.edgenames = edgenames;\n    this.vertexnames = vertexnames;\n    this.geonormals = geonormals;\n    const geonormalnames = geonormals.map((_) => _[1]);\n    this.swizzler.setGripNames(geonormalnames);\n    if (this.options.verbosity > 0) {\n      console.log(\n        \"# Distances: face \" +\n          1 +\n          \" edge \" +\n          this.edgedistance +\n          \" vertex \" +\n          this.vertexdistance,\n      );\n    }\n    // expand cutplanes by rotations.  We only work with one face here.\n    for (let c = 0; c < cutplanes.length; c++) {\n      for (const rotation of this.rotations) {\n        const q = cutplanes[c].rotateplane(rotation);\n        let wasseen = false;\n        for (const moveplane of this.moveplanes) {\n          if (q.sameplane(moveplane)) {\n            wasseen = true;\n            break;\n          }\n        }\n        if (!wasseen) {\n          this.moveplanes.push(q);\n          if (intersects[c]) {\n            this.moveplanes2.push(q);\n          }\n        }\n      }\n    }\n    let ft = new FaceTree(firstface);\n    const tar = this.moveplanes2.slice();\n    // we want to use Math.random() here but we can't, because when\n    // we call multiple times we'll get different orbits/layouts.\n    // to resolve this, we use a very simple linear congruential\n    // generator.  for our purposes, the numbers don't need to be\n    // very random.\n    let rval = 31;\n    for (let i = 0; i < tar.length; i++) {\n      const j = i + Math.floor((tar.length - i) * (rval / 65536.0));\n      ft = ft.split(tar[j]);\n      tar[j] = tar[i];\n      rval = (rval * 1657 + 101) % 65536;\n    }\n    const faces = ft.collect([], true);\n    this.faces = faces;\n    if (this.options.verbosity > 0) {\n      console.log(\"# Faces is now \" + faces.length);\n    }\n    this.stickersperface = faces.length;\n    // the faces when rotated don't preserve the vertex order at this\n    // point.  to improve 3d rendering speed, we would like to preserve\n    // vertex order on rotation.  First, let's see what rotations preserve\n    // the base face; these are the ones we want to work with.\n    const simplerot: Quat[] = [];\n    const cm = centermassface(firstface);\n    for (const rotation of this.rotations) {\n      const f = rotation.rotateface(firstface);\n      if (cm.dist(centermassface(f)) < eps) {\n        simplerot.push(rotation);\n      }\n    }\n    const finished = new Array<boolean>(faces.length);\n    const sortme: [number, Quat, number][] = [];\n    for (let i = 0; i < faces.length; i++) {\n      const cm2 = faces[i].centermass();\n      sortme.push([cm.dist(cm2), cm2, i]);\n    }\n    sortme.sort((a, b) => a[0] - b[0]);\n    for (let ii = 0; ii < faces.length; ii++) {\n      const i = sortme[ii][2];\n      if (!finished[i]) {\n        finished[i] = true;\n        for (const rot of simplerot) {\n          const f2 = faces[i].rotate(rot);\n          const cm = f2.centermass();\n          for (let kk = ii + 1; kk < faces.length; kk++) {\n            if (sortme[kk][0] - sortme[ii][0] > eps) {\n              break;\n            }\n            const k = sortme[kk][2];\n            if (!finished[k] && cm.dist(sortme[kk][1]) < eps) {\n              finished[k] = true;\n              faces[k] = f2;\n              break;\n            }\n          }\n        }\n      }\n    }\n    //  Find and report the shortest edge in any of the faces.  If this\n    //  is small the puzzle is probably not practical or displayable.\n    this.shortedge = 1e99;\n    for (const face of faces) {\n      for (let j = 0; j < face.length; j++) {\n        const k = (j + 1) % face.length;\n        const t = face.get(j).dist(face.get(k));\n        if (t < this.shortedge) {\n          this.shortedge = t;\n        }\n      }\n    }\n    if (this.options.verbosity > 0) {\n      console.log(\"# Short edge is \" + this.shortedge);\n    }\n    // add nxnxn cube notation if it has cube face moves\n    if (shape === \"c\" && sawface && !sawedge && !sawvertex) {\n      // In this case the mapper adding is deferred until we\n      // know the number of slices.\n      this.addNotationMapper = \"NxNxNCubeMapper\";\n      // try to set Reid order of the cubies within an orbit\n      this.setReidOrder = true;\n    }\n    if (shape === \"c\" && sawvertex && !sawface && !sawedge) {\n      this.addNotationMapper = \"SkewbMapper\";\n    }\n    if (shape === \"t\" && (sawvertex || sawface) && !sawedge) {\n      this.addNotationMapper = \"PyraminxOrTetraminxMapper\";\n    }\n    if (shape === \"o\" && sawface) {\n      this.notationMapper = new FaceRenamingMapper(\n        this.swizzler,\n        new FaceNameSwizzler([\"F\", \"D\", \"L\", \"BL\", \"R\", \"U\", \"BR\", \"B\"]),\n      );\n      if (!sawedge && !sawvertex) {\n        this.addNotationMapper = \"FTOMapper\";\n      }\n    }\n    if (shape === \"d\" && sawface) {\n      this.addNotationMapper = \"MegaminxMapper\";\n      this.notationMapper = new FaceRenamingMapper(\n        this.swizzler,\n        new FaceNameSwizzler([\n          \"U\",\n          \"F\",\n          \"L\",\n          \"BL\",\n          \"BR\",\n          \"R\",\n          \"FR\",\n          \"FL\",\n          \"DL\",\n          \"B\",\n          \"DR\",\n          \"D\",\n        ]),\n      );\n    }\n  }\n\n  private keyface(face: Face): string {\n    return this.keyface2(face.centermass());\n  }\n\n  private keyface2(cm: Quat): string {\n    // take a face and figure out the sides of each move plane\n    let s = \"\";\n    const sfcc = String.fromCharCode;\n    for (const moveplaneset of this.moveplanesets) {\n      if (moveplaneset.length > 0) {\n        const dv = cm.dot(moveplaneset[0]);\n        let t = 0;\n        let b = 1;\n        while (b * 2 <= moveplaneset.length) {\n          b *= 2;\n        }\n        for (; b > 0; b >>= 1) {\n          if (t + b <= moveplaneset.length && dv > moveplaneset[t + b - 1].a) {\n            t += b;\n          }\n        }\n        if (t < 47) {\n          s = s + sfcc(33 + t);\n        } else if (t < 47 + 47 * 47) {\n          s = s + sfcc(33 + 47 + Math.floor(t / 47) - 1) + sfcc(33 + (t % 47));\n        } else if (t < 47 + 47 * 47 + 47 * 47 * 47) {\n          s =\n            s +\n            sfcc(33 + 47 + Math.floor((t - 47) / (47 * 47) - 1)) +\n            sfcc(33 + 47 + (Math.floor((t - 47) / 47) % 47)) +\n            sfcc(33 + (t % 47));\n        } else {\n          throw Error(\"Too many slices for cubie encoding\");\n        }\n      }\n    }\n    return s;\n  }\n\n  // same as above, but instead of returning an encoded string, return\n  // an array with offsets.\n  private keyface3(face: Face): number[] {\n    const cm = face.centermass();\n    // take a face and figure out the sides of each move plane\n    const r = [];\n    for (const moveplaneset of this.moveplanesets) {\n      if (moveplaneset.length > 0) {\n        const dv = cm.dot(moveplaneset[0]);\n        let t = 0;\n        let b = 1;\n        while (b * 2 <= moveplaneset.length) {\n          b *= 2;\n        }\n        for (; b > 0; b >>= 1) {\n          if (t + b <= moveplaneset.length && dv > moveplaneset[t + b - 1].a) {\n            t += b;\n          }\n        }\n        r.push(t);\n      }\n    }\n    return r;\n  }\n\n  private findface(cm: Quat): number {\n    const key = this.keyface2(cm);\n    const arr = this.facelisthash.get(key)!;\n    if (arr.length === 1) {\n      return arr[0];\n    }\n    for (let i = 0; i + 1 < arr.length; i++) {\n      const face2 = this.facelisthash.get(key)![i];\n      if (Math.abs(cm.dist(this.facecentermass[face2])) < eps) {\n        return face2;\n      }\n    }\n    return arr[arr.length - 1];\n  }\n\n  private project2d(\n    facen: number,\n    edgen: number,\n    targvec: Quat[],\n  ): [Quat, Quat, Quat] {\n    // calculate geometry to map a particular edge of a particular\n    //  face to a given 2D vector.  The face is given as an index into the\n    //  facenames/baseplane arrays, and the edge is given as an offset into\n    //  the vertices.\n    const face = this.facenames[facen][0];\n    const edgen2 = (edgen + 1) % face.length;\n    const plane = this.baseplanes[facen];\n    let x0 = face[edgen2].sub(face[edgen]);\n    const olen = x0.len();\n    x0 = x0.normalize();\n    const y0 = x0.cross(plane).normalize();\n    let delta = targvec[1].sub(targvec[0]);\n    const len = delta.len() / olen;\n    delta = delta.normalize();\n    const cosr = delta.b;\n    const sinr = delta.c;\n    const x1 = x0.smul(cosr).sub(y0.smul(sinr)).smul(len);\n    const y1 = y0.smul(cosr).sum(x0.smul(sinr)).smul(len);\n    const off = new Quat(\n      0,\n      targvec[0].b - x1.dot(face[edgen]),\n      targvec[0].c - y1.dot(face[edgen]),\n      0,\n    );\n    return [x1, y1, off];\n  }\n\n  public allstickers(): void {\n    const t1 = tstart(\"allstickers\");\n    // next step is to calculate all the stickers and orbits\n    // We do enough work here to display the cube on the screen.\n    // take our newly split base face and expand it by the rotation matrix.\n    // this generates our full set of \"stickers\".\n    this.faces = expandfaces(this.baseplanerot, this.faces);\n    if (this.options.verbosity > 0) {\n      console.log(\"# Total stickers is now \" + this.faces.length);\n    }\n    this.facecentermass = new Array(this.faces.length);\n    for (let i = 0; i < this.faces.length; i++) {\n      this.facecentermass[i] = this.faces[i].centermass();\n    }\n    // Split moveplanes into a list of parallel planes.\n    const moveplanesets: Quat[][] = [];\n    const moveplanenormals: Quat[] = [];\n    // get the normals, first, from unfiltered moveplanes.\n    for (const q of this.moveplanes) {\n      const qnormal = q.makenormal();\n      let wasseen = false;\n      for (const moveplanenormal of moveplanenormals) {\n        if (qnormal.sameplane(moveplanenormal.makenormal())) {\n          wasseen = true;\n        }\n      }\n      if (!wasseen) {\n        moveplanenormals.push(qnormal);\n        moveplanesets.push([]);\n      }\n    }\n    for (const q of this.moveplanes2) {\n      const qnormal = q.makenormal();\n      for (let j = 0; j < moveplanenormals.length; j++) {\n        if (qnormal.sameplane(moveplanenormals[j])) {\n          moveplanesets[j].push(q);\n          break;\n        }\n      }\n    }\n    // make the normals all face the same way in each set.\n    for (let i = 0; i < moveplanesets.length; i++) {\n      const q: Quat[] = moveplanesets[i].map((_) => _.normalizeplane());\n      const goodnormal = moveplanenormals[i];\n      for (let j = 0; j < q.length; j++) {\n        if (q[j].makenormal().dist(goodnormal) > eps) {\n          q[j] = q[j].smul(-1);\n        }\n      }\n      q.sort((a, b) => a.a - b.a);\n      moveplanesets[i] = q;\n    }\n    this.moveplanesets = moveplanesets;\n    this.moveplanenormals = moveplanenormals;\n    const sizes = moveplanesets.map((_) => _.length);\n    if (this.options.verbosity > 0) {\n      console.log(\"# Move plane sets: \" + sizes);\n    }\n    // for each of the move planes, find the rotations that are relevant\n    const moverotations: Quat[][] = [];\n    for (let i = 0; i < moveplanesets.length; i++) {\n      moverotations.push([]);\n    }\n    for (const q of this.rotations) {\n      if (Math.abs(Math.abs(q.a) - 1) < eps) {\n        continue;\n      }\n      const qnormal = q.makenormal();\n      for (let j = 0; j < moveplanesets.length; j++) {\n        if (qnormal.sameplane(moveplanenormals[j])) {\n          moverotations[j].push(q);\n          break;\n        }\n      }\n    }\n    this.moverotations = moverotations;\n    //  Sort the rotations by the angle of rotation.  A bit tricky because\n    //  while the norms should be the same, they need not be.  So we start\n    //  by making the norms the same, and then sorting.\n    for (let i = 0; i < moverotations.length; i++) {\n      const r = moverotations[i];\n      const goodnormal = r[0].makenormal();\n      for (let j = 0; j < r.length; j++) {\n        if (goodnormal.dist(r[j].makenormal()) > eps) {\n          r[j] = r[j].smul(-1);\n        }\n      }\n      r.sort((a, b) => a.angle() - b.angle());\n      if (moverotations[i][0].dot(moveplanenormals[i]) < 0) {\n        r.reverse();\n      }\n    }\n    const sizes2 = moverotations.map((_) => 1 + _.length);\n    this.movesetorders = sizes2;\n    const movesetgeos: [string, string, string, string, number][] = [];\n    let gtype = \"?\";\n    for (let i = 0; i < moveplanesets.length; i++) {\n      const p0 = moveplanenormals[i];\n      let neg = null;\n      let pos = null;\n      for (const geonormal of this.geonormals) {\n        const d = p0.dot(geonormal[0]);\n        if (Math.abs(d - 1) < eps) {\n          pos = [geonormal[1], geonormal[2]];\n          gtype = geonormal[2];\n        } else if (Math.abs(d + 1) < eps) {\n          neg = [geonormal[1], geonormal[2]];\n          gtype = geonormal[2];\n        }\n      }\n      if (pos === null || neg === null) {\n        throw new Error(\"Saw positive or negative sides as null\");\n      }\n      movesetgeos.push([\n        pos[0],\n        pos[1],\n        neg[0],\n        neg[1],\n        1 + moveplanesets[i].length,\n      ]);\n      if (this.addNotationMapper === \"NxNxNCubeMapper\" && gtype === \"f\") {\n        this.notationMapper = new NxNxNCubeMapper(1 + moveplanesets[i].length);\n        this.addNotationMapper = \"\";\n      }\n      if (\n        this.addNotationMapper === \"SkewbMapper\" &&\n        moveplanesets[0].length === 1\n      ) {\n        this.notationMapper = new SkewbNotationMapper(this.swizzler);\n        this.addNotationMapper = \"\";\n      }\n      if (this.addNotationMapper === \"PyraminxOrTetraminxMapper\") {\n        if (\n          moveplanesets[0].length === 2 &&\n          moveplanesets[0][0].a === 0.333333333333333 &&\n          moveplanesets[0][1].a === 1.66666666666667\n        ) {\n          this.notationMapper = new PyraminxNotationMapper(this.swizzler);\n          this.addNotationMapper = \"\";\n        } else {\n          this.notationMapper = new TetraminxNotationMapper(this.swizzler);\n          this.addNotationMapper = \"\";\n        }\n      }\n      if (this.addNotationMapper === \"MegaminxMapper\" && gtype === \"f\") {\n        if (1 + moveplanesets[i].length === 3) {\n          this.notationMapper = new MegaminxScramblingNotationMapper(\n            this.notationMapper,\n          );\n        }\n        this.addNotationMapper = \"\";\n      }\n      if (this.addNotationMapper === \"FTOMapper\" && gtype === \"f\") {\n        if (1 + moveplanesets[i].length === 3) {\n          this.notationMapper = new FTONotationMapper(\n            this.notationMapper,\n            this.swizzler,\n          );\n        }\n        this.addNotationMapper = \"\";\n      }\n    }\n    this.movesetgeos = movesetgeos;\n    //  Cubies are split by move plane sets.  For each cubie we can\n    //  average its points to find a point on the interior of that\n    //  cubie.  We can then check that point against all the move\n    //  planes and from that derive a coordinate for the cubie.\n    //  This also works for faces; no face should ever lie on a move\n    //  plane.  This allows us to take a set of stickers and break\n    //  them up into cubie sets.\n    const facelisthash = new Map();\n    const faces = this.faces;\n    for (let i = 0; i < faces.length; i++) {\n      const face = faces[i];\n      const s = this.keyface(face);\n      if (!facelisthash.get(s)) {\n        facelisthash.set(s, [i]);\n      } else {\n        const arr = facelisthash.get(s)!;\n        arr.push(i);\n        //  If we find a core cubie, split it up into multiple cubies,\n        //  because ksolve doesn't handle orientations that are not\n        //  cyclic, and the rotation group of the core is not cyclic.\n        if (arr.length === this.baseFaceCount) {\n          if (this.options.verbosity > 0) {\n            console.log(\"# Splitting core.\");\n          }\n          for (let suff = 0; suff < arr.length; suff++) {\n            const s2 = s + \" \" + suff;\n            facelisthash.set(s2, [arr[suff]]);\n          }\n        }\n      }\n    }\n    this.facelisthash = facelisthash;\n    if (this.options.verbosity > 0) {\n      console.log(\"# Cubies: \" + facelisthash.size);\n    }\n    const cubies: number[][] = [];\n    const facetocubie = [];\n    const facetoord = [];\n    for (const facelist of facelisthash.values()) {\n      if (facelist.length === this.baseFaceCount) {\n        // this is the original \"cubie\" of a split core; we ignore it.\n        continue;\n      }\n      //  Sort the faces around each corner so they are counterclockwise.  Only\n      //  relevant for cubies that actually are corners (three or more\n      //  faces).  In general cubies might have many faces; for icosohedrons\n      //  there are five faces on the corner cubies.\n      if (facelist.length > 1) {\n        const cm = facelist.map((_: number) => faces[_].centermass());\n        const cmall = centermassface(cm);\n        for (let looplimit = 0; facelist.length > 2; looplimit++) {\n          let changed = false;\n          for (let i = 0; i < facelist.length; i++) {\n            const j = (i + 1) % facelist.length;\n            // var ttt = cmall.dot(cm[i].cross(cm[j])) ; // TODO\n            if (cmall.dot(cm[i].cross(cm[j])) < 0) {\n              const u = cm[i];\n              cm[i] = cm[j];\n              cm[j] = u;\n              const v = facelist[i];\n              facelist[i] = facelist[j];\n              facelist[j] = v;\n              changed = true;\n            }\n          }\n          if (!changed) {\n            break;\n          }\n          if (looplimit > 1000) {\n            throw new Error(\"Bad epsilon math; too close to border\");\n          }\n        }\n        // set the orientations by finding the marked face and putting it first.\n        let bits = 0;\n        for (const f of facelist) {\n          bits |= 1 << Math.floor(f / this.stickersperface);\n        }\n        const markedface = this.markedface[bits]!;\n        let mini = -1;\n        for (let i = 0; i < facelist.length; i++) {\n          if (Math.floor(facelist[i] / this.stickersperface) === markedface) {\n            mini = i;\n          }\n        }\n        if (mini < 0) {\n          throw new Error(\"Could not find marked face in list\");\n        }\n        if (mini !== 0) {\n          const ofacelist = facelist.slice();\n          for (let i = 0; i < facelist.length; i++) {\n            facelist[i] = ofacelist[(mini + i) % facelist.length];\n          }\n        }\n      }\n      for (let j = 0; j < facelist.length; j++) {\n        const k = facelist[j];\n        facetocubie[k] = cubies.length;\n        facetoord[k] = j;\n      }\n      cubies.push(facelist);\n    }\n    this.cubies = cubies;\n    this.facetocubie = facetocubie;\n    this.facetoord = facetoord;\n    //  Calculate the orbits of each cubie.  Assumes we do all moves.\n    //  Also calculates which cubies are identical.\n    const typenames = [\"?\", \"CENTERS\", \"EDGES\", \"CORNERS\", \"C4RNER\", \"C5RNER\"];\n    const cubiesetnames = [];\n    const cubietypecounts = [0, 0, 0, 0, 0, 0];\n    const orbitoris = [];\n    const seen = [];\n    let cubiesetnum = 0;\n    const cubiesetnums = [];\n    const cubieordnums = [];\n    const cubieords = [];\n    const cubievaluemap = [];\n    // Later we will make this smarter to use a get color for face function\n    // so we support puzzles with multiple faces the same color\n    const getcolorkey = (cubienum: number): string => {\n      return cubies[cubienum].map((_) => this.getfaceindex(_)).join(\" \");\n    };\n    const cubiesetcubies: any = [];\n    for (let i = 0; i < cubies.length; i++) {\n      const cubie = cubies[i];\n      if (cubie.length === 0) {\n        continue;\n      }\n      if (seen[i]) {\n        continue;\n      }\n      const cubiekeymap: any = {};\n      let cubievalueid = 0;\n      cubieords.push(0);\n      cubiesetcubies.push([]);\n      const facecnt = cubie.length;\n      const typectr = cubietypecounts[facecnt]++;\n      let typename = typenames[facecnt];\n      if (typename === undefined || facecnt === this.baseFaceCount) {\n        typename = \"CORE\";\n      }\n      typename = typename + (typectr === 0 ? \"\" : typectr + 1);\n      cubiesetnames[cubiesetnum] = typename;\n      orbitoris[cubiesetnum] = facecnt;\n      const queue = [i];\n      let qg = 0;\n      seen[i] = true;\n      while (qg < queue.length) {\n        const cind = queue[qg++];\n        const cubiecolorkey = getcolorkey(cind);\n        if (cubie.length > 1 || cubiekeymap[cubiecolorkey] === undefined) {\n          cubiekeymap[cubiecolorkey] = cubievalueid++;\n        }\n        cubievaluemap[cind] = cubiekeymap[cubiecolorkey];\n        cubiesetnums[cind] = cubiesetnum;\n        cubiesetcubies[cubiesetnum].push(cind);\n        cubieordnums[cind] = cubieords[cubiesetnum]++;\n        if (queue.length < this.rotations.length) {\n          const cm = this.facecentermass[cubies[cind][0]];\n          for (const moverotation of moverotations) {\n            const tq =\n              this.facetocubie[this.findface(cm.rotatepoint(moverotation[0]))];\n            if (!seen[tq]) {\n              queue.push(tq);\n              seen[tq] = true;\n            }\n          }\n        }\n      }\n      cubiesetnum++;\n    }\n    if (\n      this.setReidOrder &&\n      4 <= this.stickersperface &&\n      this.stickersperface <= 9\n    ) {\n      const reidorder = [\n        [\n          \"UF\",\n          \"UR\",\n          \"UB\",\n          \"UL\",\n          \"DF\",\n          \"DR\",\n          \"DB\",\n          \"DL\",\n          \"FR\",\n          \"FL\",\n          \"BR\",\n          \"BL\",\n        ],\n        [\"UFR\", \"URB\", \"UBL\", \"ULF\", \"DRF\", \"DFL\", \"DLB\", \"DBR\"],\n        [\"U\", \"L\", \"F\", \"R\", \"B\", \"D\"],\n      ];\n      const reidmap: { [key: number]: number } = {};\n      for (const cubie of reidorder) {\n        for (let j = 0; j < cubie.length; j++) {\n          let mask = 0;\n          for (let k = 0; k < cubie[j].length; k++) {\n            mask |= 1 << (cubie[j].charCodeAt(k) - 65);\n          }\n          reidmap[mask] = j;\n        }\n      }\n      for (const cubieset of cubiesetcubies) {\n        for (const cubienum of cubieset) {\n          let mask = 0;\n          for (const cubie of cubies[cubienum]) {\n            mask |=\n              1 <<\n              (this.facenames[this.getfaceindex(cubie)][1].charCodeAt(0) - 65);\n          }\n          cubieordnums[cubienum] = reidmap[mask];\n        }\n      }\n    }\n    this.cubiesetnums = cubiesetnums;\n    this.cubieordnums = cubieordnums;\n    this.cubiesetnames = cubiesetnames;\n    this.cubieords = cubieords;\n    this.orbitoris = orbitoris;\n    this.cubievaluemap = cubievaluemap;\n    this.cubiesetcubies = cubiesetcubies;\n    // if we fix a cubie, find a cubie to fix\n    if (this.options.fixedPieceType !== null) {\n      for (let i = 0; i < cubies.length; i++) {\n        if (\n          (this.options.fixedPieceType === \"v\" && cubies[i].length > 2) ||\n          (this.options.fixedPieceType === \"e\" && cubies[i].length === 2) ||\n          (this.options.fixedPieceType === \"f\" && cubies[i].length === 1)\n        ) {\n          this.fixedCubie = i;\n          break;\n        }\n      }\n      if (this.fixedCubie < 0) {\n        throw new Error(\n          \"Could not find a cubie of type \" +\n            this.options.fixedPieceType +\n            \" to fix.\",\n        );\n      }\n    }\n    // show the orbits\n    if (this.options.verbosity > 0) {\n      console.log(\"# Cubie orbit sizes \" + cubieords);\n    }\n    tend(t1);\n  }\n\n  public unswizzle(mv: Move): Move | null {\n    const newmv = this.notationMapper.notationToInternal(mv);\n    if (newmv === null) {\n      return null;\n    }\n    return newmv.modified({ family: this.swizzler.unswizzle(newmv.family) });\n  }\n\n  // We use an extremely permissive parse here; any character but\n  // digits are allowed in a family name.\n  private stringToBlockMove(mv: string): Move {\n    // parse a move from the command line\n    const re = RegExp(\"^(([0-9]+)-)?([0-9]+)?([^0-9]+)([0-9]+'?)?$\");\n    const p = mv.match(re);\n    if (p === null) {\n      throw new Error(\"Bad move passed \" + mv);\n    }\n    const grip = p[4];\n    let loslice = undefined;\n    let hislice = undefined;\n    if (p[2] !== undefined) {\n      if (p[3] === undefined) {\n        throw new Error(\"Missing second number in range\");\n      }\n      loslice = parseInt(p[2], 10);\n    }\n    if (p[3] !== undefined) {\n      hislice = parseInt(p[3], 10);\n    }\n    let amountstr = \"1\";\n    let amount = 1;\n    if (p[5] !== undefined) {\n      amountstr = p[5];\n      if (amountstr[0] === \"'\") {\n        amountstr = \"-\" + amountstr.substring(1);\n      }\n      amount = parseInt(amountstr, 10);\n    }\n    return new Move(new QuantumMove(grip, hislice, loslice), amount);\n  }\n\n  public parseMove(\n    move: Move,\n  ): [string | undefined, number, number, number, boolean, number] {\n    const bm = this.notationMapper.notationToInternal(move); // pluggable notation\n    if (bm === null) {\n      throw new Error(\"Bad move \" + move.family);\n    }\n    move = bm;\n    let grip = move.family;\n    let fullrotation = false;\n    if (grip.endsWith(\"v\") && grip[0] <= \"Z\") {\n      if (move.innerLayer !== undefined || move.outerLayer !== undefined) {\n        throw new Error(\"Cannot use a prefix with full cube rotations\");\n      }\n      grip = grip.slice(0, -1);\n      fullrotation = true;\n    }\n    if (grip.endsWith(\"w\") && grip[0] <= \"Z\") {\n      grip = grip.slice(0, -1).toLowerCase();\n    }\n    let geo;\n    let msi = -1;\n    const geoname = this.swizzler.unswizzle(grip);\n    let firstgrip = false;\n    for (let i = 0; i < this.movesetgeos.length; i++) {\n      const g = this.movesetgeos[i];\n      if (geoname === g[0]) {\n        firstgrip = true;\n        geo = g;\n        msi = i;\n      }\n      if (geoname === g[2]) {\n        firstgrip = false;\n        geo = g;\n        msi = i;\n      }\n    }\n    let loslice = 1;\n    let hislice = 1;\n    if (grip.toUpperCase() !== grip) {\n      hislice = 2;\n    }\n    if (geo === undefined) {\n      throw new Error(\"Bad grip in move \" + move.family);\n    }\n    if (move.outerLayer !== undefined) {\n      loslice = move.outerLayer;\n    }\n    if (move.innerLayer !== undefined) {\n      if (move.outerLayer === undefined) {\n        hislice = move.innerLayer;\n        // big assumption here!  if outerlayer not specified, but inner\n        // layer is (like 2U), we use the case of the family (upper vs\n        // lower) to decide if it should be a slice turn or a wide turn.\n        if (grip <= \"Z\") {\n          // uppercase; slice move\n          loslice = hislice;\n        } else {\n          // lowercase; wide move\n          loslice = 1;\n        }\n      } else {\n        hislice = move.innerLayer;\n      }\n    }\n    loslice--;\n    hislice--;\n    if (fullrotation) {\n      loslice = 0;\n      hislice = this.moveplanesets[msi].length;\n    }\n    if (\n      loslice < 0 ||\n      loslice > this.moveplanesets[msi].length ||\n      hislice < 0 ||\n      hislice > this.moveplanesets[msi].length\n    ) {\n      throw new Error(\n        \"Bad slice spec \" +\n          loslice +\n          \" \" +\n          hislice +\n          \" vs \" +\n          this.moveplanesets[msi].length,\n      );\n    }\n    if (\n      !permissivieMoveParsing &&\n      loslice === 0 &&\n      hislice === this.moveplanesets[msi].length &&\n      !fullrotation\n    ) {\n      throw new Error(\n        \"! full puzzle rotations must be specified with v suffix.\",\n      );\n    }\n    return [undefined, msi, loslice, hislice, firstgrip, move.amount];\n  }\n\n  private parsemove(\n    mv: string,\n  ): [string | undefined, number, number, number, boolean, number] {\n    const r = this.parseMove(this.stringToBlockMove(mv));\n    r[0] = mv;\n    return r;\n  }\n\n  public genperms(): void {\n    const t1 = tstart(\"genperms\");\n    // generate permutations for moves\n    if (this.cmovesbyslice.length > 0) {\n      // did this already?\n      return;\n    }\n    const cmovesbyslice = [];\n    // if orientCenters is set, we find all cubies that have only one\n    // sticker and that sticker is in the center of a face, and we\n    // introduce duplicate stickers so we can orient them properly.\n    //\n    //  We also rotate the vertices of the face to enforce the orientation\n    //  preferences for the oriented center stickers.\n    if (this.options.orientCenters) {\n      for (let k = 0; k < this.cubies.length; k++) {\n        if (this.cubies[k].length === 1) {\n          const kk = this.cubies[k][0];\n          const i = this.getfaceindex(kk);\n          const center = this.basefaces[i].centermass();\n          if (center.dist(this.facecentermass[kk]) < eps) {\n            const bits = (1 << i) | (1 << this.baseFaceCount);\n            const towards = this.markedface[bits];\n            const normal = this.baseplanes[towards].makenormal();\n            let hiv = -1;\n            let hii = -1;\n            for (let ii = 0; ii < this.faces[kk].length; ii++) {\n              const pt = this.faces[kk].get(ii);\n              const t = normal.dot(pt.sub(center));\n              if (t > hiv) {\n                hiv = t;\n                hii = ii;\n              }\n            }\n            // if two pts have the same distance, prefer the second\n            const hii2 = (hii + 1) % this.faces[kk].length;\n            if (\n              Math.abs(normal.dot(this.faces[kk].get(hii2).sub(center)) - hiv) <\n              eps\n            ) {\n              hii = hii2;\n            }\n            // remake the face to preserve orientations\n            if (hii != 0) {\n              const qs = [];\n              for (let ii = 0; ii < this.faces[kk].length; ii++) {\n                qs.push(this.faces[kk].get((ii + hii) % this.faces[kk].length));\n              }\n              this.faces[kk] = new Face(qs);\n            }\n            const o = this.basefaces[i].length;\n            for (let m = 1; m < o; m++) {\n              this.cubies[k].push(this.cubies[k][m - 1]);\n            }\n            this.duplicatedFaces[kk] = o;\n            this.duplicatedCubies[k] = o;\n            this.orbitoris[this.cubiesetnums[k]] = o;\n          }\n        }\n      }\n    }\n    for (let k = 0; k < this.moveplanesets.length; k++) {\n      const moveplaneset = this.moveplanesets[k];\n      const slicenum = [];\n      const slicecnts = [moveplaneset.length + 1, 0];\n      let bhi = 1;\n      while (bhi * 2 <= moveplaneset.length) {\n        bhi *= 2;\n      }\n      for (let i = 0; i < this.faces.length; i++) {\n        let t = 0;\n        if (moveplaneset.length > 0) {\n          const dv = this.facecentermass[i].dot(moveplaneset[0]);\n          for (let b = bhi; b > 0; b >>= 1) {\n            if (\n              t + b <= moveplaneset.length &&\n              dv > moveplaneset[t + b - 1].a\n            ) {\n              t += b;\n            }\n          }\n          t = moveplaneset.length - t;\n        }\n        slicenum.push(t);\n        while (slicecnts.length <= t) {\n          slicecnts.push(0);\n        }\n        slicecnts[t]++;\n      }\n      const axiscmoves = new Array(slicecnts.length);\n      for (let sc = 0; sc < slicecnts.length; sc++) {\n        axiscmoves[sc] = [];\n      }\n      const cubiedone = [];\n      for (let i = 0; i < this.faces.length; i++) {\n        if (slicenum[i] < 0) {\n          continue;\n        }\n        const b = [this.facetocubie[i], this.facetoord[i]];\n        let cm = this.facecentermass[i];\n        const ocm = cm;\n        let fi2 = i;\n        const sc = slicenum[fi2];\n        for (;;) {\n          slicenum[fi2] = -1;\n          const cm2 = cm.rotatepoint(this.moverotations[k][0]);\n          if (cm2.dist(ocm) < eps) {\n            break;\n          }\n          fi2 = this.findface(cm2);\n          b.push(this.facetocubie[fi2], this.facetoord[fi2]);\n          cm = cm2;\n        }\n        // If an oriented center is moving, we need to figure out\n        // the appropriate new orientation.  Normally we use the cubie\n        // sticker identity to locate, but this doesn't work here.\n        // Instead we need to redo the geometry of the sticker itself\n        // rotating and figure out how that maps to the destination\n        // sticker.\n        //\n        // We only need to do this for central center stickers: those\n        // where the face vertex goes through the center.  The others\n        // don't actually need orientation because they can only be\n        // in one orientation by physical constraints.  (You can't spin\n        // a point or cross sticker on the 5x5x5, for example.)\n        //\n        // This also simplifies things because it means the actual\n        // remapping has the same order as the moves themselves.\n        //\n        // The center may or may not have been duplicated at this point.\n        //\n        // The move moving the center might not be the same modulo as the\n        // center itself.\n        if (\n          b.length > 2 &&\n          this.options.orientCenters &&\n          (this.cubies[b[0]].length === 1 || this.duplicatedCubies[b[0]] > 1)\n        ) {\n          // is this a real center cubie, around an axis?\n          if (\n            this.facecentermass[i].dist(\n              this.basefaces[this.getfaceindex(i)].centermass(),\n            ) < eps\n          ) {\n            // how does remapping of the face/point set map to the original?\n            let face1 = this.faces[this.cubies[b[0]][0]];\n            for (let ii = 0; ii < b.length; ii += 2) {\n              const face0 = this.faces[this.cubies[b[ii]][0]];\n              let o = -1;\n              for (let jj = 0; jj < face1.length; jj++) {\n                if (face0.get(jj).dist(face1.get(0)) < eps) {\n                  o = jj;\n                  break;\n                }\n              }\n              if (o < 0) {\n                throw new Error(\n                  \"Couldn't find rotation of center faces; ignoring for now.\",\n                );\n              } else {\n                b[ii + 1] = o;\n                face1 = face1.rotate(this.moverotations[k][0]);\n              }\n            }\n          }\n        }\n        // b.length == 2 means a sticker is spinning in place.\n        // in this case we add duplicate stickers\n        // so that we can make it animate properly in a 3D world.\n        if (b.length === 2 && this.options.orientCenters) {\n          for (let ii = 1; ii < this.movesetorders[k]; ii++) {\n            if (sc === 0) {\n              b.push(b[0], ii);\n            } else {\n              b.push(\n                b[0],\n                (this.movesetorders[k] - ii) % this.movesetorders[k],\n              );\n            }\n          }\n        }\n        if (b.length > 2 && !cubiedone[b[0]]) {\n          if (b.length !== 2 * this.movesetorders[k]) {\n            throw new Error(\"Bad length in perm gen\");\n          }\n          for (const v of b) {\n            axiscmoves[sc].push(v);\n          }\n        }\n        for (let j = 0; j < b.length; j += 2) {\n          cubiedone[b[j]] = true;\n        }\n      }\n      for (let kk = 0; kk < axiscmoves.length; kk++) {\n        axiscmoves[kk] = axiscmoves[kk].slice();\n      }\n      cmovesbyslice.push(axiscmoves);\n    }\n    this.cmovesbyslice = cmovesbyslice;\n    if (this.options.moveList) {\n      const parsedmovelist: [\n        string | undefined,\n        number,\n        number,\n        number,\n        boolean,\n        number,\n      ][] = [];\n      // make sure the movelist makes sense based on the geos.\n      for (const moveString of this.options.moveList) {\n        parsedmovelist.push(this.parsemove(moveString));\n      }\n      this.parsedmovelist = parsedmovelist;\n    }\n    this.facelisthash.clear();\n    this.facecentermass = [];\n    tend(t1);\n  }\n\n  private getboundarygeometry(): any {\n    // get the boundary geometry\n    return {\n      baseplanes: this.baseplanes,\n      facenames: this.facenames,\n      faceplanes: this.faceplanes,\n      vertexnames: this.vertexnames,\n      edgenames: this.edgenames,\n      geonormals: this.geonormals,\n    };\n  }\n\n  private getmovesets(k: number): any {\n    // get the move sets we support based on slices\n    // for even values we omit the middle \"slice\".  This isn't perfect\n    // but it is what we do for now.\n    // if there was a move list specified, pull values from that\n    const slices = this.moveplanesets[k].length;\n    let r: any[] = [];\n    if (this.parsedmovelist !== undefined) {\n      for (const parsedmove of this.parsedmovelist) {\n        if (parsedmove[1] !== k) {\n          continue;\n        }\n        if (parsedmove[4]) {\n          r.push([parsedmove[2], parsedmove[3]]);\n        } else {\n          r.push([slices - parsedmove[3], slices - parsedmove[2]]);\n        }\n        r.push(parsedmove[5]);\n      }\n    } else if (this.options.vertexMoves && !this.options.allMoves) {\n      const msg = this.movesetgeos[k];\n      if (msg[1] !== msg[3]) {\n        for (let i = 0; i < slices; i++) {\n          if (msg[1] !== \"v\") {\n            if (this.options.outerBlockMoves) {\n              r.push([i + 1, slices]);\n            } else {\n              r.push([i + 1]);\n            }\n            r.push(1);\n          } else {\n            if (this.options.outerBlockMoves) {\n              r.push([0, i]);\n            } else {\n              r.push([i, i]);\n            }\n            r.push(1);\n          }\n        }\n      }\n    } else {\n      for (let i = 0; i <= slices; i++) {\n        if (!this.options.allMoves && i + i === slices) {\n          continue;\n        }\n        if (this.options.outerBlockMoves) {\n          if (i + i > slices) {\n            r.push([i, slices]);\n          } else {\n            r.push([0, i]);\n          }\n        } else {\n          r.push([i, i]);\n        }\n        r.push(1);\n      }\n    }\n    if (this.fixedCubie >= 0) {\n      const dep = this.keyface3(this.faces[this.cubies[this.fixedCubie][0]])[k];\n      const newr = [];\n      for (let i = 0; i < r.length; i += 2) {\n        let o = r[i];\n        if (dep >= o[0] && dep <= o[1]) {\n          if (o[0] === 0) {\n            o = [o[1] + 1, slices];\n          } else if (slices === o[1]) {\n            o = [0, o[0] - 1];\n          } else {\n            throw Error(\"fixed cubie option would disconnect move\");\n          }\n        }\n        let found = false;\n        for (let j = 0; j < newr.length; j += 2) {\n          if (\n            newr[j][0] === o[0] &&\n            newr[j][1] === o[1] &&\n            newr[j + 1] === r[i + 1]\n          ) {\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          newr.push(o);\n          newr.push(r[i + 1]);\n        }\n      }\n      r = newr;\n    }\n    // TODO\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return r;\n  }\n\n  private graybyori(cubie: number): boolean {\n    let ori = this.cubies[cubie].length;\n    if (this.duplicatedCubies[cubie]) {\n      ori = 1;\n    }\n    return (\n      (ori === 1 &&\n        (this.options.grayCenters || !this.options.includeCenterOrbits)) ||\n      (ori === 2 &&\n        (this.options.grayEdges || !this.options.includeEdgeOrbits)) ||\n      (ori > 2 &&\n        (this.options.grayCorners || !this.options.includeCornerOrbits))\n    );\n  }\n\n  private skipbyori(cubie: number): boolean {\n    let ori = this.cubies[cubie].length;\n    if (this.duplicatedCubies[cubie]) {\n      ori = 1;\n    }\n    return (\n      (ori === 1 && !this.options.includeCenterOrbits) ||\n      (ori === 2 && !this.options.includeEdgeOrbits) ||\n      (ori > 2 && !this.options.includeCornerOrbits)\n    );\n  }\n\n  private skipcubie(fi: number): boolean {\n    return this.skipbyori(fi);\n  }\n\n  private header(comment: string): string {\n    return comment + copyright + \"\\n\" + comment + \"\\n\";\n  }\n\n  public writegap(): string {\n    // write out a gap set of generators\n    const os = this.getOrbitsDef(false);\n    const r = [];\n    const mvs = [];\n    for (let i = 0; i < os.moveops.length; i++) {\n      let movename = \"M_\" + externalName(this.notationMapper, os.movenames[i]);\n      let doinv = false;\n      if (movename[movename.length - 1] === \"'\") {\n        movename = movename.substring(0, movename.length - 1);\n        doinv = true;\n      }\n      // gap doesn't like angle brackets in IDs\n      mvs.push(movename);\n      if (doinv) {\n        r.push(movename + \":=\" + os.moveops[i].toPerm().inv().toGap() + \";\");\n      } else {\n        r.push(movename + \":=\" + os.moveops[i].toPerm().toGap() + \";\");\n      }\n    }\n    r.push(\"Gen:=[\");\n    r.push(mvs.join(\",\"));\n    r.push(\"];\");\n    const ip = os.solved.identicalPieces();\n    r.push(\n      \"ip:=[\" +\n        ip.map((_) => \"[\" + _.map((__) => __ + 1).join(\",\") + \"]\").join(\",\") +\n        \"];\",\n    );\n    r.push(\"# Size(Group(Gen));\");\n    r.push(\"# Size(Stabilizer(Group(Gen), ip, OnTuplesSets));\");\n    r.push(\"\");\n    return this.header(\"# \") + r.join(\"\\n\");\n  }\n\n  public writeksolve(name: string = \"PuzzleGeometryPuzzle\"): string {\n    const od = this.getOrbitsDef(false);\n    return (\n      this.header(\"# \") + od.toKsolve(name, this.notationMapper).join(\"\\n\")\n    );\n  }\n\n  public getKPuzzleDefinition(\n    fortwisty: boolean = true,\n    includemoves: boolean = true,\n  ): KPuzzleDefinition {\n    const od = this.getOrbitsDef(fortwisty, includemoves);\n    const internalDefinition = od.toKPuzzleDefinition(includemoves);\n    (internalDefinition as any).experimentalPuzzleDescription =\n      this.puzzleDescription;\n    if (!internalDefinition) {\n      throw new Error(\"Missing definition!\");\n    }\n    return internalDefinition;\n  }\n\n  public getMoveFromBits(\n    moverange: number[],\n    amount: number,\n    inverted: boolean,\n    axiscmoves: number[][],\n    setmoves: number[] | undefined,\n    movesetorder: number,\n  ): PGTransform {\n    const moveorbits: PGOrbit[] = [];\n    const perms = [];\n    const oris = [];\n    for (const len of this.cubieords) {\n      perms.push(iota(len));\n      oris.push(zeros(len));\n    }\n    for (let m = moverange[0]; m <= moverange[1]; m++) {\n      const slicecmoves = axiscmoves[m];\n      for (let j = 0; j < slicecmoves.length; j += 2 * movesetorder) {\n        const mperm = slicecmoves.slice(j, j + 2 * movesetorder);\n        const setnum = this.cubiesetnums[mperm[0]];\n        for (let ii = 0; ii < mperm.length; ii += 2) {\n          mperm[ii] = this.cubieordnums[mperm[ii]];\n        }\n        let inc = 2;\n        let oinc = 3;\n        if (inverted) {\n          inc = mperm.length - 2;\n          oinc = mperm.length - 1;\n        }\n        if (perms[setnum] === iota(this.cubieords[setnum])) {\n          perms[setnum] = perms[setnum].slice();\n          if (this.orbitoris[setnum] > 1 && !this.options.fixedOrientation) {\n            oris[setnum] = oris[setnum].slice();\n          }\n        }\n        for (let ii = 0; ii < mperm.length; ii += 2) {\n          perms[setnum][mperm[(ii + inc) % mperm.length]] = mperm[ii];\n          if (this.orbitoris[setnum] > 1 && !this.options.fixedOrientation) {\n            oris[setnum][mperm[ii]] =\n              (mperm[(ii + oinc) % mperm.length] -\n                mperm[(ii + 1) % mperm.length] +\n                2 * this.orbitoris[setnum]) %\n              this.orbitoris[setnum];\n          }\n        }\n      }\n    }\n    let lastId = new PGOrbit(iota(24), zeros(24), 1);\n    for (let ii = 0; ii < this.cubiesetnames.length; ii++) {\n      if (setmoves && !setmoves[ii]) {\n        continue;\n      }\n      if (this.orbitoris[ii] === 1 || this.options.fixedOrientation) {\n        if (perms[ii] === iota(lastId.perm.length)) {\n          if (perms[ii] !== lastId.perm) {\n            lastId = new PGOrbit(perms[ii], oris[ii], 1);\n          }\n          moveorbits.push(lastId);\n        } else {\n          moveorbits.push(new PGOrbit(perms[ii], oris[ii], 1));\n        }\n      } else {\n        const no = new Array<number>(oris[ii].length);\n        // convert ksolve oris to our internal ori rep\n        for (let jj = 0; jj < perms[ii].length; jj++) {\n          no[jj] = oris[ii][perms[ii][jj]];\n        }\n        moveorbits.push(new PGOrbit(perms[ii], no, this.orbitoris[ii]));\n      }\n    }\n    let mv = new PGTransform(moveorbits);\n    if (amount !== 1) {\n      mv = mv.mulScalar(amount);\n    }\n    return mv;\n  }\n\n  private omitSet(name: string): boolean {\n    for (const excludedSet of this.options.excludeOrbits) {\n      if (excludedSet === name) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private diffmvsets(a: any[], b: any[], slices: number, neg: boolean) {\n    for (let i = 0; i < a.length; i += 2) {\n      let found = false;\n      for (let j = 0; !found && j < b.length; j += 2) {\n        if (neg) {\n          if (\n            a[i][0] + b[j][1] === slices &&\n            a[i][1] + b[j][0] === slices &&\n            a[i + 1] === b[j + 1]\n          ) {\n            found = true;\n          }\n        } else {\n          if (\n            a[i][0] === b[j][0] &&\n            a[i][1] === b[j][1] &&\n            a[i + 1] === b[j + 1]\n          ) {\n            found = true;\n          }\n        }\n      }\n      if (!found) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // TODO: This is only public for testing; can we make it private again?\n  public getOrbitsDef(\n    fortwisty: boolean,\n    includemoves: boolean = true,\n  ): PGOrbitsDef {\n    // generate a representation of the puzzle\n    const setmoves = [];\n    if (fortwisty) {\n      for (let i = 0; i < this.cubiesetnames.length; i++) {\n        setmoves.push(1);\n      }\n    }\n    const setnames: string[] = [];\n    const setdefs: PGOrbitDef[] = [];\n    // if both a movelist and rotations are needed, don't add rotations\n    // that do not preserve the movelist.\n    const mps = [];\n    const addrot = [];\n    for (let k = 0; k < this.moveplanesets.length; k++) {\n      const moveset = this.getmovesets(k);\n      mps.push(moveset);\n      if (this.options.addRotations) {\n        addrot.push(1);\n      } else {\n        addrot.push(0);\n      }\n    }\n    const hasrotation = [];\n    for (let k = 0; k < this.moveplanesets.length; k++) {\n      const slices = this.moveplanesets[k].length;\n      // if the move set includes a rotation around this axis, don't add any more\n      let sawone = false;\n      const moveset = mps[k];\n      for (let i = 0; i < moveset.length; i += 2) {\n        if (moveset[i][0] === 0 && moveset[i][1] === slices) {\n          sawone = true;\n        }\n      }\n      hasrotation[k] = sawone;\n    }\n    if (this.options.moveList && this.options.addRotations) {\n      for (let i = 0; i < this.moverotations.length; i++) {\n        addrot[i] = 0;\n      }\n      for (let k = 0; k < this.moveplanesets.length; k++) {\n        // if the move set includes a rotation around this axis, don't add any more\n        if (hasrotation[k]) {\n          addrot[k] = 3;\n          continue;\n        }\n        // does a rotation around k preserve the move set?\n        for (let i = 0; i < this.moverotations.length; i++) {\n          let nn = this.moveplanenormals[k];\n          for (let ii = 1; ii * 2 <= this.movesetorders[i]; ii++) {\n            nn = nn.rotatepoint(this.moverotations[i][0]);\n            if (addrot[i] & ii) {\n              continue;\n            }\n            let found = -1;\n            let neg = false;\n            for (let j = 0; j < this.moveplanenormals.length; j++) {\n              if (nn.dist(this.moveplanenormals[j]) < eps) {\n                found = j;\n                break;\n              } else if (nn.dist(this.moveplanenormals[j].smul(-1)) < eps) {\n                found = j;\n                neg = true;\n                break;\n              }\n            }\n            if (found < 0) {\n              throw new Error(\"Could not find rotation\");\n            }\n            const cmp = mps[found];\n            if (\n              cmp.length !== mps[k].length ||\n              this.moveplanesets[k].length !==\n                this.moveplanesets[found].length ||\n              this.diffmvsets(\n                cmp,\n                mps[k],\n                this.moveplanesets[found].length,\n                neg,\n              )\n            ) {\n              addrot[i] |= ii;\n            }\n          }\n        }\n      }\n      for (let i = 0; i < this.moverotations.length; i++) {\n        if (addrot[i] === 0) {\n          addrot[i] = 1;\n        } else if (addrot[i] === 1) {\n          if (this.movesetorders[i] > 3) {\n            addrot[i] = 2;\n          } else {\n            addrot[i] = 0;\n          }\n        } else if (addrot[i] === 3) {\n          addrot[i] = 0;\n        } else {\n          throw new Error(\"Impossible addrot val\");\n        }\n      }\n    }\n    for (let k = 0; k < this.moveplanesets.length; k++) {\n      if (addrot[k] !== 0 && !hasrotation[k]) {\n        mps[k].push([0, this.moveplanesets[k].length]);\n        mps[k].push(addrot[k]);\n      }\n    }\n    for (let k = 0; k < this.moveplanesets.length; k++) {\n      const moveset = mps[k];\n      const movesetorder = this.movesetorders[k];\n      // check there's no redundancy in moveset.\n      for (let i = 0; i < moveset.length; i += 2) {\n        for (let j = 0; j < i; j += 2) {\n          if (\n            moveset[i][0] === moveset[j][0] &&\n            moveset[i][1] === moveset[j][1]\n          ) {\n            throw new Error(\"Redundant moves in moveset.\");\n          }\n        }\n      }\n      const allbits = [];\n      for (let i = 0; i < moveset.length; i += 2) {\n        for (let j = moveset[i][0]; j <= moveset[i][1]; j++) {\n          allbits[j] = 1;\n        }\n      }\n      const axiscmoves = this.cmovesbyslice[k];\n      for (let i = 0; i < axiscmoves.length; i++) {\n        if (allbits[i] !== 1) {\n          continue;\n        }\n        const slicecmoves = axiscmoves[i];\n        for (let j = 0; j < slicecmoves.length; j += 2 * movesetorder) {\n          if (this.skipcubie(slicecmoves[j])) {\n            continue;\n          }\n          const ind = this.cubiesetnums[slicecmoves[j]];\n          setmoves[ind] = 1;\n        }\n      }\n    }\n    for (let i = 0; i < this.cubiesetnames.length; i++) {\n      if (!setmoves[i]) {\n        continue;\n      }\n      if (this.omitSet(this.cubiesetnames[i])) {\n        setmoves[i] = 0;\n        continue;\n      }\n      setnames.push(this.cubiesetnames[i]);\n      setdefs.push(\n        new PGOrbitDef(\n          this.cubieords[i],\n          this.options.fixedOrientation ? 1 : this.orbitoris[i],\n        ),\n      );\n    }\n    const solved: PGOrbit[] = [];\n    for (let i = 0; i < this.cubiesetnames.length; i++) {\n      if (!setmoves[i]) {\n        continue;\n      }\n      if (this.omitSet(this.cubiesetnames[i])) {\n        continue;\n      }\n      const p = [];\n      const o = [];\n      for (let j = 0; j < this.cubieords[i]; j++) {\n        if (fortwisty) {\n          p.push(j);\n        } else {\n          const cubie = this.cubiesetcubies[i][j];\n          p.push(this.cubievaluemap[cubie]);\n        }\n        o.push(0);\n      }\n      solved.push(\n        new PGOrbit(\n          p,\n          o,\n          this.options.fixedOrientation ? 1 : this.orbitoris[i],\n        ),\n      );\n    }\n    const movenames: string[] = [];\n    const forcenames: boolean[] = [];\n    const moves: PGTransform[] = [];\n    const isrots: boolean[] = [];\n    if (includemoves) {\n      for (let k = 0; k < this.moveplanesets.length; k++) {\n        const moveplaneset = this.moveplanesets[k];\n        const slices = moveplaneset.length;\n        const moveset = mps[k];\n        const movesetgeo = this.movesetgeos[k];\n        for (let i = 0; i < moveset.length; i += 2) {\n          const movebits = moveset[i];\n          // did these movebits come from a specified move?\n          // if they did, we need to use that name.\n          let nameoverride: string | undefined;\n          let inverted = false;\n          if (this.parsedmovelist !== undefined) {\n            for (const parsedmove of this.parsedmovelist) {\n              if (parsedmove[1] !== k) {\n                continue;\n              }\n              let r = [];\n              if (parsedmove[4]) {\n                r = [parsedmove[2], parsedmove[3]];\n              } else {\n                r = [slices - parsedmove[3], slices - parsedmove[2]];\n              }\n              if (r[0] === movebits[0] && r[1] === movebits[1]) {\n                nameoverride = parsedmove[0];\n                inverted = !parsedmove[4];\n              }\n            }\n          }\n          if (nameoverride) {\n            movenames.push(nameoverride);\n            forcenames.push(true);\n          } else {\n            const mna = getmovename(movesetgeo, movebits, slices);\n            inverted = mna[1];\n            const movename = mna[0];\n            if (moveset[i + 1] === 1) {\n              movenames.push(movename);\n            } else {\n              movenames.push(movename + moveset[i + 1]);\n            }\n            forcenames.push(false);\n          }\n          isrots.push(movebits[0] === 0 && movebits[1] === slices);\n          const mv = this.getMoveFromBits(\n            movebits,\n            moveset[i + 1],\n            inverted,\n            this.cmovesbyslice[k],\n            setmoves,\n            this.movesetorders[k],\n          );\n          moves.push(mv);\n        }\n      }\n    }\n    let r = new PGOrbitsDef(\n      setnames,\n      setdefs,\n      new VisibleState(solved),\n      movenames,\n      moves,\n      isrots,\n      forcenames,\n    );\n    if (this.options.optimizeOrbits) {\n      r = r.optimize();\n    }\n    if (this.options.scrambleAmount !== 0) {\n      r.scramble(this.options.scrambleAmount);\n    }\n    return r;\n  }\n\n  public getScramble(n: number = 0): KTransformationData {\n    const od = this.getOrbitsDef(false);\n    return od.transformToKTransformationData(od.getScrambleTransformation(n));\n  }\n\n  public getMovesAsPerms(): Perm[] {\n    return this.getOrbitsDef(false).moveops.map((_) => _.toPerm());\n  }\n\n  public showcanon(disp: (s: string) => void): void {\n    // show information for canonical move derivation\n    showcanon(this.getOrbitsDef(false), disp);\n  }\n\n  public getsolved(): Perm {\n    // get a solved position\n    const r = [];\n    for (let i = 0; i < this.baseFaceCount; i++) {\n      for (let j = 0; j < this.stickersperface; j++) {\n        r.push(i);\n      }\n    }\n    return new Perm(r);\n  }\n\n  // Given a rotation description that says to align feature1\n  // with a given vector, and then as much as possible feature2\n  // with another given vector, return a Quaternion that\n  // performs this rotation.\n  private getOrientationRotation(desiredRotation: any[]): Quat {\n    const [feature1name, [x1, y1, z1]] = desiredRotation[0];\n    const direction1 = new Quat(0, x1, -y1, z1);\n\n    const [feature2name, [x2, y2, z2]] = desiredRotation[1];\n    const direction2 = new Quat(0, x2, -y2, z2);\n    let feature1: Quat | null = null;\n    let feature2: Quat | null = null;\n    const feature1geoname = this.swizzler.unswizzle(feature1name);\n    const feature2geoname = this.swizzler.unswizzle(feature2name);\n    for (const gn of this.geonormals) {\n      if (feature1geoname === gn[1]) {\n        feature1 = gn[0];\n      }\n      if (feature2geoname === gn[1]) {\n        feature2 = gn[0];\n      }\n    }\n    if (!feature1) {\n      throw new Error(\"Could not find feature \" + feature1name);\n    }\n    if (!feature2) {\n      throw new Error(\"Could not find feature \" + feature2name);\n    }\n    const r1 = feature1.pointrotation(direction1);\n    const feature2rot = feature2.rotatepoint(r1);\n    const r2 = feature2rot\n      .unproject(direction1)\n      .pointrotation(direction2.unproject(direction1));\n    return r2.mul(r1);\n  }\n\n  private getInitial3DRotation(): Quat {\n    const basefacecount = this.baseFaceCount;\n    let orientationDescription: FaceBasedOrientationDescription | null = null;\n    if (this.options.puzzleOrientation) {\n      orientationDescription = this.options.puzzleOrientation;\n    } else if (this.options.puzzleOrientations) {\n      orientationDescription = this.options.puzzleOrientations[basefacecount];\n    }\n    // either no option specified or no matching key in\n    // puzzleOrientations.\n    if (!orientationDescription) {\n      orientationDescription = defaultOrientations()[basefacecount];\n    }\n    if (!orientationDescription) {\n      throw new Error(\"No default orientation?\");\n    }\n    return this.getOrientationRotation(orientationDescription);\n  }\n\n  private generate2dmapping(\n    w: number = 800,\n    h: number = 500,\n    trim: number = 10,\n    threed: boolean = false,\n    twodshrink: number = 0.92,\n  ): (fn: number, q: Quat) => number[] {\n    // generate a mapping to use for 2D for textures, svg\n    w -= 2 * trim;\n    h -= 2 * trim;\n    function extendedges(a: number[][], n: number): void {\n      let dx = a[1][0] - a[0][0];\n      let dy = a[1][1] - a[0][1];\n      const ang = (2 * Math.PI) / n;\n      const cosa = Math.cos(ang);\n      const sina = Math.sin(ang);\n      for (let i = 2; i < n; i++) {\n        const ndx = dx * cosa + dy * sina;\n        dy = dy * cosa - dx * sina;\n        dx = ndx;\n        a.push([a[i - 1][0] + dx, a[i - 1][1] + dy]);\n      }\n    }\n    // Find a net from a given face count.  Walk it, assuming we locate\n    // the first edge from (0,0) to (1,1) and compute the minimum and\n    // maximum vertex locations from this.  Then do a second walk, and\n    // assign the actual geometry.\n    this.genperms();\n    const boundarygeo = this.getboundarygeometry();\n    const face0 = boundarygeo.facenames[0][0];\n    const polyn = face0.length; // number of vertices; 3, 4, or 5\n    const net = this.net;\n    if (net === null) {\n      throw new Error(\"No net?\");\n    }\n    const edges: any = {};\n    let minx = 0;\n    let miny = 0;\n    let maxx = 1;\n    let maxy = 0;\n    edges[net[0][0]] = [\n      [1, 0],\n      [0, 0],\n    ];\n    extendedges(edges[net[0][0]], polyn);\n    for (const neti of net) {\n      const f0 = neti[0];\n      if (!edges[f0]) {\n        throw new Error(\"Bad edge description; first edge not connected.\");\n      }\n      for (let j = 1; j < neti.length; j++) {\n        const f1 = neti[j];\n        if (f1 === \"\" || edges[f1]) {\n          continue;\n        }\n        edges[f1] = [edges[f0][j % polyn], edges[f0][(j + polyn - 1) % polyn]];\n        extendedges(edges[f1], polyn);\n      }\n    }\n    for (const f in edges) {\n      const es = edges[f];\n      for (const esi of es) {\n        minx = Math.min(minx, esi[0]);\n        maxx = Math.max(maxx, esi[0]);\n        miny = Math.min(miny, esi[1]);\n        maxy = Math.max(maxy, esi[1]);\n      }\n    }\n    const sc = Math.min(w / (maxx - minx), h / (maxy - miny));\n    const xoff = 0.5 * (w - sc * (maxx + minx));\n    const yoff = 0.5 * (h - sc * (maxy + miny));\n    const geos: Record<string, Quat[]> = {};\n    const bg = this.getboundarygeometry();\n    const edges2: any = {};\n    const initv = [\n      [sc + xoff, yoff],\n      [xoff, yoff],\n    ];\n    edges2[net[0][0]] = initv;\n    extendedges(edges2[net[0][0]], polyn);\n    geos[this.facenames[0][1]] = this.project2d(0, 0, [\n      new Quat(0, initv[0][0], initv[0][1], 0),\n      new Quat(0, initv[1][0], initv[1][1], 0),\n    ]);\n    const connectat = [];\n    connectat[0] = 0;\n    for (const neti of net) {\n      const f0 = neti[0];\n      if (!edges2[f0]) {\n        throw new Error(\"Bad edge description; first edge not connected.\");\n      }\n      let gfi = -1;\n      for (let j = 0; j < bg.facenames.length; j++) {\n        if (f0 === bg.facenames[j][1]) {\n          gfi = j;\n          break;\n        }\n      }\n      if (gfi < 0) {\n        throw new Error(\"Could not find first face name \" + f0);\n      }\n      const thisface = bg.facenames[gfi][0];\n      for (let j = 1; j < neti.length; j++) {\n        const f1 = neti[j];\n        if (f1 === \"\" || edges2[f1]) {\n          continue;\n        }\n        edges2[f1] = [\n          edges2[f0][j % polyn],\n          edges2[f0][(j + polyn - 1) % polyn],\n        ];\n        extendedges(edges2[f1], polyn);\n        // what edge are we at?\n        const caf0 = connectat[gfi];\n        const mp = thisface[(caf0 + j) % polyn]\n          .sum(thisface[(caf0 + j + polyn - 1) % polyn])\n          .smul(0.5);\n        const epi = findelement(bg.edgenames, mp);\n        const edgename = bg.edgenames[epi][1];\n        const el = splitByFaceNames(edgename, this.facenames);\n        const gf1 = el[f0 === el[0] ? 1 : 0];\n        let gf1i = -1;\n        for (let k = 0; k < bg.facenames.length; k++) {\n          if (gf1 === bg.facenames[k][1]) {\n            gf1i = k;\n            break;\n          }\n        }\n        if (gf1i < 0) {\n          throw new Error(\"Could not find second face name\");\n        }\n        const otherface = bg.facenames[gf1i][0];\n        for (let k = 0; k < otherface.length; k++) {\n          const mp2 = otherface[k].sum(otherface[(k + 1) % polyn]).smul(0.5);\n          if (mp2.dist(mp) <= eps) {\n            const p1 = edges2[f0][(j + polyn - 1) % polyn];\n            const p2 = edges2[f0][j % polyn];\n            connectat[gf1i] = k;\n            geos[gf1] = this.project2d(gf1i, k, [\n              new Quat(0, p2[0], p2[1], 0),\n              new Quat(0, p1[0], p1[1], 0),\n            ]);\n            break;\n          }\n        }\n      }\n    }\n    let hix = 0;\n    let hiy = 0;\n    const rot = this.getInitial3DRotation();\n    for (let face of this.faces) {\n      if (threed) {\n        face = face.rotate(rot);\n      }\n      for (let j = 0; j < face.length; j++) {\n        hix = Math.max(hix, Math.abs(face.get(j).b));\n        hiy = Math.max(hiy, Math.abs(face.get(j).c));\n      }\n    }\n    const sc2 = Math.min(h / hiy / 2, (w - trim) / hix / 4);\n    const mappt2d = (fn: number, q: Quat): number[] => {\n      if (threed) {\n        q = q.rotatepoint(rot);\n        const xoff2 = 0.5 * trim + 0.25 * w;\n        const xmul = this.baseplanes[fn].rotateplane(rot).d < 0 ? 1 : -1;\n        return [\n          trim + w * 0.5 + xmul * (xoff2 - q.b * sc2),\n          trim + h * 0.5 + q.c * sc2,\n        ];\n      } else {\n        const g = geos[this.facenames[fn][1]];\n        return [\n          trim + twodshrink * q.dot(g[0]) + g[2].b,\n          trim + h - twodshrink * q.dot(g[1]) - g[2].c,\n        ];\n      }\n    };\n    return mappt2d;\n  }\n\n  public generatesvg(\n    w: number = 800,\n    h: number = 500,\n    trim: number = 10,\n    threed: boolean = false,\n  ): string {\n    const mappt2d = this.generate2dmapping(w, h, trim, threed);\n    function drawedges(id: string, pts: number[][], color: string): string {\n      return (\n        '<polygon id=\"' +\n        id +\n        '\" class=\"sticker\" style=\"fill: ' +\n        color +\n        '\" points=\"' +\n        pts.map((p) => p[0] + \" \" + p[1]).join(\" \") +\n        '\"/>\\n'\n      );\n    }\n    // Let's build arrays for faster rendering.  We want to map from geo\n    // base face number to color, and we want to map from geo face number\n    // to 2D geometry.  These can be reused as long as the puzzle overall\n    // orientation and canvas size remains unchanged.\n    const pos = this.getsolved();\n    const colormap = [];\n    const facegeo = [];\n    for (let i = 0; i < this.baseFaceCount; i++) {\n      colormap[i] = this.colors[this.facenames[i][1]];\n    }\n    for (let i = 0; i < this.faces.length; i++) {\n      const face = this.faces[i];\n      const facenum = Math.floor(i / this.stickersperface);\n      const fg = [];\n      for (let j = 0; j < face.length; j++) {\n        fg.push(mappt2d(facenum, face.get(j)));\n      }\n      facegeo.push(fg);\n    }\n    const svg = [];\n    // group each base face so we can add a hover element\n    for (let j = 0; j < this.baseFaceCount; j++) {\n      svg.push(\"<g>\");\n      svg.push(\"<title>\" + this.facenames[j][1] + \"</title>\\n\");\n      for (let ii = 0; ii < this.stickersperface; ii++) {\n        const i = j * this.stickersperface + ii;\n        const cubie = this.facetocubie[i];\n        const cubieori = this.facetoord[i];\n        const cubiesetnum = this.cubiesetnums[cubie];\n        const cubieord = this.cubieordnums[cubie];\n        const color = this.graybyori(cubie) ? \"#808080\" : colormap[pos.p[i]];\n        let id =\n          this.cubiesetnames[cubiesetnum] + \"-l\" + cubieord + \"-o\" + cubieori;\n        svg.push(drawedges(id, facegeo[i], color));\n        if (this.duplicatedFaces[i]) {\n          for (let jj = 1; jj < this.duplicatedFaces[i]; jj++) {\n            id = this.cubiesetnames[cubiesetnum] + \"-l\" + cubieord + \"-o\" + jj;\n            svg.push(drawedges(id, facegeo[i], color));\n          }\n        }\n      }\n      svg.push(\"</g>\");\n    }\n    const html =\n      '<svg id=\"svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 800 500\">\\n' +\n      '<style type=\"text/css\"><![CDATA[' +\n      \".sticker { stroke: #000000; stroke-width: 1px; }\" +\n      \"]]></style>\\n\" +\n      svg.join(\"\") +\n      \"</svg>\";\n    return html;\n  }\n\n  // The colorfrac parameter says how much of the face should be\n  // colored (vs dividing lines); we default to 0.77 which seems\n  // to work pretty well.  It should be a number between probably\n  // 0.4 and 0.9.\n  public get3d(options?: { stickerColors?: string[] }): StickerDat {\n    const stickers = [];\n    const rot = this.getInitial3DRotation();\n    const faces = [];\n    const maxdist: number = 0.52 * this.basefaces[0].get(0).len();\n    for (let i = 0; i < this.basefaces.length; i++) {\n      const coords = this.basefaces[i].rotate(rot);\n      const name = this.facenames[i][1];\n      faces.push({ coords: toFaceCoords(coords, maxdist), name });\n    }\n    for (let i = 0; i < this.faces.length; i++) {\n      const facenum = Math.floor(i / this.stickersperface);\n      const cubie = this.facetocubie[i];\n      const cubieori = this.facetoord[i];\n      const cubiesetnum = this.cubiesetnums[cubie];\n      const cubieord = this.cubieordnums[cubie];\n      let color = this.graybyori(cubie)\n        ? \"#808080\"\n        : this.colors[this.facenames[facenum][1]];\n      if (options?.stickerColors) {\n        color = options.stickerColors[i];\n      }\n      const coords = this.faces[i].rotate(rot);\n      stickers.push({\n        coords: toFaceCoords(coords, maxdist),\n        color,\n        orbit: this.cubiesetnames[cubiesetnum],\n        ord: cubieord,\n        ori: cubieori,\n        face: facenum,\n      });\n      let fcoords = coords;\n      if (this.duplicatedFaces[i]) {\n        const rotdist = fcoords.length / this.duplicatedFaces[i];\n        for (let jj = 1; jj < this.duplicatedFaces[i]; jj++) {\n          for (let k = 0; k < rotdist; k++) {\n            fcoords = fcoords.rotateforward();\n          }\n          stickers.push({\n            coords: toFaceCoords(fcoords, maxdist),\n            color,\n            orbit: this.cubiesetnames[cubiesetnum],\n            ord: cubieord,\n            ori: jj,\n            face: facenum,\n            isDup: true,\n          });\n        }\n      }\n    }\n    const grips: StickerDatAxis[] = [];\n    for (let i = 0; i < this.movesetgeos.length; i++) {\n      const msg = this.movesetgeos[i];\n      const order = this.movesetorders[i];\n      for (const gn of this.geonormals) {\n        if (msg[0] === gn[1] && msg[1] === gn[2]) {\n          grips.push({\n            coordinates: toCoords(gn[0].rotatepoint(rot), 1),\n            quantumMove: new Move(msg[0]),\n            order,\n          });\n          grips.push({\n            coordinates: toCoords(gn[0].rotatepoint(rot).smul(-1), 1),\n            quantumMove: new Move(msg[2]),\n            order,\n          });\n        }\n      }\n    }\n    const twodmapper = this.generate2dmapping(2880, 2160, 0, false, 1.0);\n    const g = (function () {\n      const irot = rot.invrot();\n      return function (facenum: number, coords: number[]): number[] {\n        let q = new Quat(\n          0,\n          coords[0] * maxdist,\n          -coords[1] * maxdist,\n          coords[2] * maxdist,\n        );\n        q = q.rotatepoint(irot);\n        const x = twodmapper(facenum, q);\n        x[0] /= 2880;\n        x[1] = 1 - x[1] / 2160;\n        return x;\n      };\n    })().bind(this);\n    return {\n      stickers,\n      faces,\n      axis: grips,\n      unswizzle: this.unswizzle.bind(this),\n      notationMapper: this.notationMapper,\n      textureMapper: { getuv: g },\n    };\n  }\n\n  //  From the name of a geometric element (face, vertex, edge), get a\n  //  normal vector respecting the default orientation.  This is useful\n  //  to define the initial position of the camera in a 3D scene.  The\n  //  return value is normalized, so multiply it by the camera distance.\n  //  Returns undefined if no such geometric element.\n  public getGeoNormal(geoname: string): number[] | undefined {\n    const rot = this.getInitial3DRotation();\n    const grip = this.swizzler.unswizzle(geoname);\n    for (const gn of this.geonormals) {\n      if (grip === gn[1]) {\n        const r = toCoords(gn[0].rotatepoint(rot), 1);\n        //  This routine is intended to use for the camera location.\n        //  If the camera location is vertical, and we give some\n        //  near-zero values for x and z, then the rotation in the\n        //  X/Z plane will be somewhat arbitrary.  So we clean up the\n        //  returned vector here.  We give a very slight positive\n        //  z value.\n        if (Math.abs(r[0]) < eps && Math.abs(r[2]) < eps) {\n          r[0] = 0.0;\n          r[2] = 1e-6;\n        }\n        return r;\n      }\n    }\n    return undefined;\n  }\n\n  private getfaceindex(facenum: number): number {\n    const divid = this.stickersperface;\n    return Math.floor(facenum / divid);\n  }\n\n  public textForTwizzleExplorer(): string {\n    return `Faces ${this.baseplanerot.length}\nStickers per face ${this.stickersperface}\nShort edge ${this.shortedge}\nCubies ${this.cubies.length}\nEdge distance ${this.edgedistance}\nVertex distance ${this.vertexdistance}`;\n  }\n\n  writeSchreierSims(tw: (s: string) => void) {\n    const os = this.getOrbitsDef(false);\n    const as = os.reassemblySize();\n    tw(`Reassembly size is ${as}`);\n    const ss = schreierSims(this.getMovesAsPerms(), tw);\n    const r = as / ss;\n    tw(`Ratio is ${r}`);\n  }\n}\n\nexport class PGNotation {\n  private orbitNames: string[];\n  constructor(private pg: PuzzleGeometry, od: PGOrbitsDef) {\n    this.orbitNames = od.orbitnames;\n  }\n\n  public lookupMove(move: Move): KTransformationData | null {\n    const mv = this.pg.parseMove(move);\n    // if a move list subset is defined, don't return moves outside the subset.\n    if (this.pg.parsedmovelist) {\n      let found = false;\n      for (const parsedmove of this.pg.parsedmovelist) {\n        if (\n          parsedmove[1] === mv[1] &&\n          parsedmove[2] === mv[2] &&\n          parsedmove[3] === mv[3] &&\n          parsedmove[4] === mv[4]\n        ) {\n          found = true;\n        }\n      }\n      if (!found) {\n        return null;\n      }\n    }\n    let bits = [mv[2], mv[3]];\n    if (!mv[4]) {\n      const slices = this.pg.moveplanesets[mv[1]].length;\n      bits = [slices - mv[3], slices - mv[2]];\n    }\n    const pgmv = this.pg.getMoveFromBits(\n      bits,\n      mv[5],\n      !mv[4],\n      this.pg.cmovesbyslice[mv[1]],\n      undefined,\n      this.pg.movesetorders[mv[1]],\n    );\n    const r = PGOrbitsDef.transformToKTransformationData(this.orbitNames, pgmv);\n    return r;\n  }\n}\n"],
  "mappings": "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,IAAI;AAAA,IACF,GAAG;AAAA,MACD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,IACA,GAAG;AAAA,MACD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,IACA,GAAG;AAAA,MACD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EACA,IAAI;AAAA,IACF,GAAG;AAAA,MACD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,IACA,GAAG;AAAA,MACD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA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",
  "names": []
}
